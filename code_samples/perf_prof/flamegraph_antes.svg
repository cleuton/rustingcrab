<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1190" onload="init(evt)" viewBox="0 0 1200 1190" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1190" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1173.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1173.00"> </text><svg id="frames" x="10" width="1180" total_samples="151"><g><title>regex_automata::hybrid::dfa::DFA::try_search_fwd (1 samples, 0.66%)</title><rect x="0.0000%" y="645" width="0.6623%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.66%)</title><rect x="0.0000%" y="629" width="0.6623%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd_imp (1 samples, 0.66%)</title><rect x="0.0000%" y="613" width="0.6623%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::next_state_untagged_unchecked (1 samples, 0.66%)</title><rect x="0.0000%" y="597" width="0.6623%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>&lt;regex::regex::string::Matches as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.32%)</title><rect x="0.0000%" y="789" width="1.3245%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2"/><text x="0.2500%" y="799.50"></text></g><g><title>&lt;regex_automata::meta::regex::FindMatches as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.32%)</title><rect x="0.0000%" y="773" width="1.3245%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="2"/><text x="0.2500%" y="783.50"></text></g><g><title>regex_automata::util::iter::Searcher::advance (2 samples, 1.32%)</title><rect x="0.0000%" y="757" width="1.3245%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="767.50"></text></g><g><title>regex_automata::util::iter::Searcher::try_advance (2 samples, 1.32%)</title><rect x="0.0000%" y="741" width="1.3245%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="2"/><text x="0.2500%" y="751.50"></text></g><g><title>&lt;regex_automata::meta::regex::FindMatches as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (2 samples, 1.32%)</title><rect x="0.0000%" y="725" width="1.3245%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="2"/><text x="0.2500%" y="735.50"></text></g><g><title>regex_automata::meta::regex::Regex::search_with (2 samples, 1.32%)</title><rect x="0.0000%" y="709" width="1.3245%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="2"/><text x="0.2500%" y="719.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 1.32%)</title><rect x="0.0000%" y="693" width="1.3245%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="2"/><text x="0.2500%" y="703.50"></text></g><g><title>regex_automata::meta::wrappers::HybridEngine::try_search (2 samples, 1.32%)</title><rect x="0.0000%" y="677" width="1.3245%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="2"/><text x="0.2500%" y="687.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 1.32%)</title><rect x="0.0000%" y="661" width="1.3245%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="2"/><text x="0.2500%" y="671.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::try_search_rev (1 samples, 0.66%)</title><rect x="0.6623%" y="645" width="0.6623%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.9123%" y="655.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.66%)</title><rect x="0.6623%" y="629" width="0.6623%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.9123%" y="639.50"></text></g><g><title>regex_automata::hybrid::search::find_rev_imp (1 samples, 0.66%)</title><rect x="0.6623%" y="613" width="0.6623%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.9123%" y="623.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::next_state (1 samples, 0.66%)</title><rect x="0.6623%" y="597" width="0.6623%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="0.9123%" y="607.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.66%)</title><rect x="0.6623%" y="581" width="0.6623%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="0.9123%" y="591.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::add_builder_state (1 samples, 0.66%)</title><rect x="0.6623%" y="565" width="0.6623%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="0.9123%" y="575.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.66%)</title><rect x="0.6623%" y="549" width="0.6623%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.9123%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.66%)</title><rect x="0.6623%" y="533" width="0.6623%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="0.9123%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.66%)</title><rect x="0.6623%" y="517" width="0.6623%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="0.9123%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.66%)</title><rect x="0.6623%" y="501" width="0.6623%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="1"/><text x="0.9123%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.66%)</title><rect x="0.6623%" y="485" width="0.6623%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="1"/><text x="0.9123%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.66%)</title><rect x="0.6623%" y="469" width="0.6623%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="1"/><text x="0.9123%" y="479.50"></text></g><g><title>hashbrown::control::group::sse2::Group::load (1 samples, 0.66%)</title><rect x="0.6623%" y="453" width="0.6623%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="1"/><text x="0.9123%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.66%)</title><rect x="0.6623%" y="437" width="0.6623%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="1"/><text x="0.9123%" y="447.50"></text></g><g><title>core::ptr::copy_nonoverlapping (1 samples, 0.66%)</title><rect x="0.6623%" y="421" width="0.6623%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="1"/><text x="0.9123%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;regex_automata::meta::regex::RegexI&gt;&gt; (1 samples, 0.66%)</title><rect x="1.3245%" y="757" width="0.6623%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="1"/><text x="1.5745%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="1.3245%" y="741" width="0.6623%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="1"/><text x="1.5745%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.66%)</title><rect x="1.3245%" y="725" width="0.6623%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="1"/><text x="1.5745%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.66%)</title><rect x="1.3245%" y="709" width="0.6623%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="1"/><text x="1.5745%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt; (1 samples, 0.66%)</title><rect x="1.9868%" y="709" width="0.6623%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="1"/><text x="2.2368%" y="719.50"></text></g><g><title>__GI___libc_free (1 samples, 0.66%)</title><rect x="1.9868%" y="693" width="0.6623%" height="15" fill="rgb(254,191,54)" fg:x="3" fg:w="1"/><text x="2.2368%" y="703.50"></text></g><g><title>_int_free (1 samples, 0.66%)</title><rect x="1.9868%" y="677" width="0.6623%" height="15" fill="rgb(241,83,37)" fg:x="3" fg:w="1"/><text x="2.2368%" y="687.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.66%)</title><rect x="1.9868%" y="661" width="0.6623%" height="15" fill="rgb(233,36,39)" fg:x="3" fg:w="1"/><text x="2.2368%" y="671.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.66%)</title><rect x="1.9868%" y="645" width="0.6623%" height="15" fill="rgb(226,3,54)" fg:x="3" fg:w="1"/><text x="2.2368%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::util::determinize::state::State&gt;&gt; (1 samples, 0.66%)</title><rect x="2.6490%" y="597" width="0.6623%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="1"/><text x="2.8990%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="2.6490%" y="581" width="0.6623%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1"/><text x="2.8990%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::util::determinize::state::State]&gt; (1 samples, 0.66%)</title><rect x="2.6490%" y="565" width="0.6623%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1"/><text x="2.8990%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::determinize::state::State&gt; (1 samples, 0.66%)</title><rect x="2.6490%" y="549" width="0.6623%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="1"/><text x="2.8990%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;[u8]&gt;&gt; (1 samples, 0.66%)</title><rect x="2.6490%" y="533" width="0.6623%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="1"/><text x="2.8990%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="2.6490%" y="517" width="0.6623%" height="15" fill="rgb(235,93,37)" fg:x="4" fg:w="1"/><text x="2.8990%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.66%)</title><rect x="2.6490%" y="501" width="0.6623%" height="15" fill="rgb(213,116,39)" fg:x="4" fg:w="1"/><text x="2.8990%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.66%)</title><rect x="2.6490%" y="485" width="0.6623%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="1"/><text x="2.8990%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 2.65%)</title><rect x="1.3245%" y="789" width="2.6490%" height="15" fill="rgb(206,96,30)" fg:x="2" fg:w="4"/><text x="1.5745%" y="799.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Regex&gt; (4 samples, 2.65%)</title><rect x="1.3245%" y="773" width="2.6490%" height="15" fill="rgb(218,138,4)" fg:x="2" fg:w="4"/><text x="1.5745%" y="783.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (3 samples, 1.99%)</title><rect x="1.9868%" y="757" width="1.9868%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="3"/><text x="2.2368%" y="767.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_automata::util::pool::inner::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt;&gt; (3 samples, 1.99%)</title><rect x="1.9868%" y="741" width="1.9868%" height="15" fill="rgb(239,60,40)" fg:x="3" fg:w="3"/><text x="2.2368%" y="751.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::inner::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::panic::unwind_safe::UnwindSafe+core::marker::Sync+core::panic::unwind_safe::RefUnwindSafe+core::marker::Send&gt;&gt;&gt; (3 samples, 1.99%)</title><rect x="1.9868%" y="725" width="1.9868%" height="15" fill="rgb(206,27,48)" fg:x="3" fg:w="3"/><text x="2.2368%" y="735.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;core::option::Option&lt;regex_automata::meta::regex::Cache&gt;&gt;&gt; (2 samples, 1.32%)</title><rect x="2.6490%" y="709" width="1.3245%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="2"/><text x="2.8990%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;regex_automata::meta::regex::Cache&gt;&gt; (2 samples, 1.32%)</title><rect x="2.6490%" y="693" width="1.3245%" height="15" fill="rgb(250,213,24)" fg:x="4" fg:w="2"/><text x="2.8990%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 1.32%)</title><rect x="2.6490%" y="677" width="1.3245%" height="15" fill="rgb(247,123,22)" fg:x="4" fg:w="2"/><text x="2.8990%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::HybridCache&gt; (2 samples, 1.32%)</title><rect x="2.6490%" y="661" width="1.3245%" height="15" fill="rgb(231,138,38)" fg:x="4" fg:w="2"/><text x="2.8990%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;regex_automata::hybrid::regex::Cache&gt;&gt; (2 samples, 1.32%)</title><rect x="2.6490%" y="645" width="1.3245%" height="15" fill="rgb(231,145,46)" fg:x="4" fg:w="2"/><text x="2.8990%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::regex::Cache&gt; (2 samples, 1.32%)</title><rect x="2.6490%" y="629" width="1.3245%" height="15" fill="rgb(251,118,11)" fg:x="4" fg:w="2"/><text x="2.8990%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 1.32%)</title><rect x="2.6490%" y="613" width="1.3245%" height="15" fill="rgb(217,147,25)" fg:x="4" fg:w="2"/><text x="2.8990%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::sparse_set::SparseSets&gt; (1 samples, 0.66%)</title><rect x="3.3113%" y="597" width="0.6623%" height="15" fill="rgb(247,81,37)" fg:x="5" fg:w="1"/><text x="3.5613%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::sparse_set::SparseSet&gt; (1 samples, 0.66%)</title><rect x="3.3113%" y="581" width="0.6623%" height="15" fill="rgb(209,12,38)" fg:x="5" fg:w="1"/><text x="3.5613%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::util::primitives::StateID&gt;&gt; (1 samples, 0.66%)</title><rect x="3.3113%" y="565" width="0.6623%" height="15" fill="rgb(227,1,9)" fg:x="5" fg:w="1"/><text x="3.5613%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::util::primitives::StateID&gt;&gt; (1 samples, 0.66%)</title><rect x="3.3113%" y="549" width="0.6623%" height="15" fill="rgb(248,47,43)" fg:x="5" fg:w="1"/><text x="3.5613%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="3.3113%" y="533" width="0.6623%" height="15" fill="rgb(221,10,30)" fg:x="5" fg:w="1"/><text x="3.5613%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.66%)</title><rect x="3.3113%" y="517" width="0.6623%" height="15" fill="rgb(210,229,1)" fg:x="5" fg:w="1"/><text x="3.5613%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.66%)</title><rect x="3.3113%" y="501" width="0.6623%" height="15" fill="rgb(222,148,37)" fg:x="5" fg:w="1"/><text x="3.5613%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.66%)</title><rect x="3.3113%" y="485" width="0.6623%" height="15" fill="rgb(234,67,33)" fg:x="5" fg:w="1"/><text x="3.5613%" y="495.50"></text></g><g><title>__GI___libc_free (1 samples, 0.66%)</title><rect x="3.3113%" y="469" width="0.6623%" height="15" fill="rgb(247,98,35)" fg:x="5" fg:w="1"/><text x="3.5613%" y="479.50"></text></g><g><title>arena_for_chunk (1 samples, 0.66%)</title><rect x="3.3113%" y="453" width="0.6623%" height="15" fill="rgb(247,138,52)" fg:x="5" fg:w="1"/><text x="3.5613%" y="463.50"></text></g><g><title>arena_for_chunk (1 samples, 0.66%)</title><rect x="3.3113%" y="437" width="0.6623%" height="15" fill="rgb(213,79,30)" fg:x="5" fg:w="1"/><text x="3.5613%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.66%)</title><rect x="3.9735%" y="517" width="0.6623%" height="15" fill="rgb(246,177,23)" fg:x="6" fg:w="1"/><text x="4.2235%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.66%)</title><rect x="3.9735%" y="501" width="0.6623%" height="15" fill="rgb(230,62,27)" fg:x="6" fg:w="1"/><text x="4.2235%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.66%)</title><rect x="3.9735%" y="485" width="0.6623%" height="15" fill="rgb(216,154,8)" fg:x="6" fg:w="1"/><text x="4.2235%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.66%)</title><rect x="3.9735%" y="469" width="0.6623%" height="15" fill="rgb(244,35,45)" fg:x="6" fg:w="1"/><text x="4.2235%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="3.9735%" y="453" width="0.6623%" height="15" fill="rgb(251,115,12)" fg:x="6" fg:w="1"/><text x="4.2235%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="3.9735%" y="437" width="0.6623%" height="15" fill="rgb(240,54,50)" fg:x="6" fg:w="1"/><text x="4.2235%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.66%)</title><rect x="3.9735%" y="421" width="0.6623%" height="15" fill="rgb(233,84,52)" fg:x="6" fg:w="1"/><text x="4.2235%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.66%)</title><rect x="3.9735%" y="405" width="0.6623%" height="15" fill="rgb(207,117,47)" fg:x="6" fg:w="1"/><text x="4.2235%" y="415.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.66%)</title><rect x="3.9735%" y="389" width="0.6623%" height="15" fill="rgb(249,43,39)" fg:x="6" fg:w="1"/><text x="4.2235%" y="399.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.66%)</title><rect x="3.9735%" y="373" width="0.6623%" height="15" fill="rgb(209,38,44)" fg:x="6" fg:w="1"/><text x="4.2235%" y="383.50"></text></g><g><title>_int_realloc (1 samples, 0.66%)</title><rect x="3.9735%" y="357" width="0.6623%" height="15" fill="rgb(236,212,23)" fg:x="6" fg:w="1"/><text x="4.2235%" y="367.50"></text></g><g><title>_int_malloc (1 samples, 0.66%)</title><rect x="3.9735%" y="341" width="0.6623%" height="15" fill="rgb(242,79,21)" fg:x="6" fg:w="1"/><text x="4.2235%" y="351.50"></text></g><g><title>malloc_consolidate (1 samples, 0.66%)</title><rect x="3.9735%" y="325" width="0.6623%" height="15" fill="rgb(211,96,35)" fg:x="6" fg:w="1"/><text x="4.2235%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 1.32%)</title><rect x="3.9735%" y="565" width="1.3245%" height="15" fill="rgb(253,215,40)" fg:x="6" fg:w="2"/><text x="4.2235%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 1.32%)</title><rect x="3.9735%" y="549" width="1.3245%" height="15" fill="rgb(211,81,21)" fg:x="6" fg:w="2"/><text x="4.2235%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 1.32%)</title><rect x="3.9735%" y="533" width="1.3245%" height="15" fill="rgb(208,190,38)" fg:x="6" fg:w="2"/><text x="4.2235%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.66%)</title><rect x="4.6358%" y="517" width="0.6623%" height="15" fill="rgb(235,213,38)" fg:x="7" fg:w="1"/><text x="4.8858%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.66%)</title><rect x="4.6358%" y="501" width="0.6623%" height="15" fill="rgb(237,122,38)" fg:x="7" fg:w="1"/><text x="4.8858%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.66%)</title><rect x="4.6358%" y="485" width="0.6623%" height="15" fill="rgb(244,218,35)" fg:x="7" fg:w="1"/><text x="4.8858%" y="495.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.66%)</title><rect x="4.6358%" y="469" width="0.6623%" height="15" fill="rgb(240,68,47)" fg:x="7" fg:w="1"/><text x="4.8858%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.66%)</title><rect x="4.6358%" y="453" width="0.6623%" height="15" fill="rgb(210,16,53)" fg:x="7" fg:w="1"/><text x="4.8858%" y="463.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.66%)</title><rect x="4.6358%" y="437" width="0.6623%" height="15" fill="rgb(235,124,12)" fg:x="7" fg:w="1"/><text x="4.8858%" y="447.50"></text></g><g><title>core::ptr::read (1 samples, 0.66%)</title><rect x="4.6358%" y="421" width="0.6623%" height="15" fill="rgb(224,169,11)" fg:x="7" fg:w="1"/><text x="4.8858%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 1.99%)</title><rect x="3.9735%" y="693" width="1.9868%" height="15" fill="rgb(250,166,2)" fg:x="6" fg:w="3"/><text x="4.2235%" y="703.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[regex_syntax::ast::Ast]&gt; (3 samples, 1.99%)</title><rect x="3.9735%" y="677" width="1.9868%" height="15" fill="rgb(242,216,29)" fg:x="6" fg:w="3"/><text x="4.2235%" y="687.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 1.99%)</title><rect x="3.9735%" y="661" width="1.9868%" height="15" fill="rgb(230,116,27)" fg:x="6" fg:w="3"/><text x="4.2235%" y="671.50">c..</text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 1.99%)</title><rect x="3.9735%" y="645" width="1.9868%" height="15" fill="rgb(228,99,48)" fg:x="6" fg:w="3"/><text x="4.2235%" y="655.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::ast::ClassBracketed&gt;&gt; (3 samples, 1.99%)</title><rect x="3.9735%" y="629" width="1.9868%" height="15" fill="rgb(253,11,6)" fg:x="6" fg:w="3"/><text x="4.2235%" y="639.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassBracketed&gt; (3 samples, 1.99%)</title><rect x="3.9735%" y="613" width="1.9868%" height="15" fill="rgb(247,143,39)" fg:x="6" fg:w="3"/><text x="4.2235%" y="623.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (3 samples, 1.99%)</title><rect x="3.9735%" y="597" width="1.9868%" height="15" fill="rgb(236,97,10)" fg:x="6" fg:w="3"/><text x="4.2235%" y="607.50">c..</text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 1.99%)</title><rect x="3.9735%" y="581" width="1.9868%" height="15" fill="rgb(233,208,19)" fg:x="6" fg:w="3"/><text x="4.2235%" y="591.50">&lt;..</text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.66%)</title><rect x="5.2980%" y="565" width="0.6623%" height="15" fill="rgb(216,164,2)" fg:x="8" fg:w="1"/><text x="5.5480%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::ast::Ast&gt;&gt; (4 samples, 2.65%)</title><rect x="3.9735%" y="709" width="2.6490%" height="15" fill="rgb(220,129,5)" fg:x="6" fg:w="4"/><text x="4.2235%" y="719.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_syntax::ast::Ast&gt;&gt; (1 samples, 0.66%)</title><rect x="5.9603%" y="693" width="0.6623%" height="15" fill="rgb(242,17,10)" fg:x="9" fg:w="1"/><text x="6.2103%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="5.9603%" y="677" width="0.6623%" height="15" fill="rgb(242,107,0)" fg:x="9" fg:w="1"/><text x="6.2103%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.66%)</title><rect x="5.9603%" y="661" width="0.6623%" height="15" fill="rgb(251,28,31)" fg:x="9" fg:w="1"/><text x="6.2103%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.66%)</title><rect x="5.9603%" y="645" width="0.6623%" height="15" fill="rgb(233,223,10)" fg:x="9" fg:w="1"/><text x="6.2103%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.66%)</title><rect x="5.9603%" y="629" width="0.6623%" height="15" fill="rgb(215,21,27)" fg:x="9" fg:w="1"/><text x="6.2103%" y="639.50"></text></g><g><title>__GI___libc_free (1 samples, 0.66%)</title><rect x="5.9603%" y="613" width="0.6623%" height="15" fill="rgb(232,23,21)" fg:x="9" fg:w="1"/><text x="6.2103%" y="623.50"></text></g><g><title>_int_free (1 samples, 0.66%)</title><rect x="5.9603%" y="597" width="0.6623%" height="15" fill="rgb(244,5,23)" fg:x="9" fg:w="1"/><text x="6.2103%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.66%)</title><rect x="6.6225%" y="709" width="0.6623%" height="15" fill="rgb(226,81,46)" fg:x="10" fg:w="1"/><text x="6.8725%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="6.6225%" y="693" width="0.6623%" height="15" fill="rgb(247,70,30)" fg:x="10" fg:w="1"/><text x="6.8725%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_syntax::hir::Hir]&gt; (1 samples, 0.66%)</title><rect x="6.6225%" y="677" width="0.6623%" height="15" fill="rgb(212,68,19)" fg:x="10" fg:w="1"/><text x="6.8725%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::Hir&gt; (1 samples, 0.66%)</title><rect x="6.6225%" y="661" width="0.6623%" height="15" fill="rgb(240,187,13)" fg:x="10" fg:w="1"/><text x="6.8725%" y="671.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="6.6225%" y="645" width="0.6623%" height="15" fill="rgb(223,113,26)" fg:x="10" fg:w="1"/><text x="6.8725%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::Hir&gt; (1 samples, 0.66%)</title><rect x="6.6225%" y="629" width="0.6623%" height="15" fill="rgb(206,192,2)" fg:x="10" fg:w="1"/><text x="6.8725%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.66%)</title><rect x="6.6225%" y="613" width="0.6623%" height="15" fill="rgb(241,108,4)" fg:x="10" fg:w="1"/><text x="6.8725%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::Hir&gt; (1 samples, 0.66%)</title><rect x="6.6225%" y="597" width="0.6623%" height="15" fill="rgb(247,173,49)" fg:x="10" fg:w="1"/><text x="6.8725%" y="607.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="6.6225%" y="581" width="0.6623%" height="15" fill="rgb(224,114,35)" fg:x="10" fg:w="1"/><text x="6.8725%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.66%)</title><rect x="6.6225%" y="565" width="0.6623%" height="15" fill="rgb(245,159,27)" fg:x="10" fg:w="1"/><text x="6.8725%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.66%)</title><rect x="6.6225%" y="549" width="0.6623%" height="15" fill="rgb(245,172,44)" fg:x="10" fg:w="1"/><text x="6.8725%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="6.6225%" y="533" width="0.6623%" height="15" fill="rgb(236,23,11)" fg:x="10" fg:w="1"/><text x="6.8725%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.66%)</title><rect x="6.6225%" y="517" width="0.6623%" height="15" fill="rgb(205,117,38)" fg:x="10" fg:w="1"/><text x="6.8725%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.66%)</title><rect x="6.6225%" y="501" width="0.6623%" height="15" fill="rgb(237,72,25)" fg:x="10" fg:w="1"/><text x="6.8725%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.66%)</title><rect x="6.6225%" y="485" width="0.6623%" height="15" fill="rgb(244,70,9)" fg:x="10" fg:w="1"/><text x="6.8725%" y="495.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.66%)</title><rect x="7.2848%" y="661" width="0.6623%" height="15" fill="rgb(217,125,39)" fg:x="11" fg:w="1"/><text x="7.5348%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::builder::Builder&gt;&gt; (1 samples, 0.66%)</title><rect x="7.9470%" y="645" width="0.6623%" height="15" fill="rgb(235,36,10)" fg:x="12" fg:w="1"/><text x="8.1970%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::builder::Builder&gt;&gt; (1 samples, 0.66%)</title><rect x="7.9470%" y="629" width="0.6623%" height="15" fill="rgb(251,123,47)" fg:x="12" fg:w="1"/><text x="8.1970%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::builder::Builder&gt; (1 samples, 0.66%)</title><rect x="7.9470%" y="613" width="0.6623%" height="15" fill="rgb(221,13,13)" fg:x="12" fg:w="1"/><text x="8.1970%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::builder::State&gt;&gt; (1 samples, 0.66%)</title><rect x="7.9470%" y="597" width="0.6623%" height="15" fill="rgb(238,131,9)" fg:x="12" fg:w="1"/><text x="8.1970%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="7.9470%" y="581" width="0.6623%" height="15" fill="rgb(211,50,8)" fg:x="12" fg:w="1"/><text x="8.1970%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::builder::State]&gt; (1 samples, 0.66%)</title><rect x="7.9470%" y="565" width="0.6623%" height="15" fill="rgb(245,182,24)" fg:x="12" fg:w="1"/><text x="8.1970%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::builder::State&gt; (1 samples, 0.66%)</title><rect x="7.9470%" y="549" width="0.6623%" height="15" fill="rgb(242,14,37)" fg:x="12" fg:w="1"/><text x="8.1970%" y="559.50"></text></g><g><title>__GI___libc_free (1 samples, 0.66%)</title><rect x="7.9470%" y="533" width="0.6623%" height="15" fill="rgb(246,228,12)" fg:x="12" fg:w="1"/><text x="8.1970%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 11.92%)</title><rect x="8.6093%" y="565" width="11.9205%" height="15" fill="rgb(213,55,15)" fg:x="13" fg:w="18"/><text x="8.8593%" y="575.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::map::Utf8BoundedEntry]&gt; (18 samples, 11.92%)</title><rect x="8.6093%" y="549" width="11.9205%" height="15" fill="rgb(209,9,3)" fg:x="13" fg:w="18"/><text x="8.8593%" y="559.50">core::ptr::drop_in..</text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt; (18 samples, 11.92%)</title><rect x="8.6093%" y="533" width="11.9205%" height="15" fill="rgb(230,59,30)" fg:x="13" fg:w="18"/><text x="8.8593%" y="543.50">core::ptr::drop_in..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (18 samples, 11.92%)</title><rect x="8.6093%" y="517" width="11.9205%" height="15" fill="rgb(209,121,21)" fg:x="13" fg:w="18"/><text x="8.8593%" y="527.50">core::ptr::drop_in..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::nfa::Transition&gt;&gt; (18 samples, 11.92%)</title><rect x="8.6093%" y="501" width="11.9205%" height="15" fill="rgb(220,109,13)" fg:x="13" fg:w="18"/><text x="8.8593%" y="511.50">core::ptr::drop_in..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 11.92%)</title><rect x="8.6093%" y="485" width="11.9205%" height="15" fill="rgb(232,18,1)" fg:x="13" fg:w="18"/><text x="8.8593%" y="495.50">&lt;alloc::raw_vec::R..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2 samples, 1.32%)</title><rect x="19.2053%" y="469" width="1.3245%" height="15" fill="rgb(215,41,42)" fg:x="29" fg:w="2"/><text x="19.4553%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 1.32%)</title><rect x="19.2053%" y="453" width="1.3245%" height="15" fill="rgb(224,123,36)" fg:x="29" fg:w="2"/><text x="19.4553%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 1.32%)</title><rect x="19.2053%" y="437" width="1.3245%" height="15" fill="rgb(240,125,3)" fg:x="29" fg:w="2"/><text x="19.4553%" y="447.50"></text></g><g><title>__GI___libc_free (1 samples, 0.66%)</title><rect x="19.8675%" y="421" width="0.6623%" height="15" fill="rgb(205,98,50)" fg:x="30" fg:w="1"/><text x="20.1175%" y="431.50"></text></g><g><title>_int_free (1 samples, 0.66%)</title><rect x="19.8675%" y="405" width="0.6623%" height="15" fill="rgb(205,185,37)" fg:x="30" fg:w="1"/><text x="20.1175%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (19 samples, 12.58%)</title><rect x="8.6093%" y="645" width="12.5828%" height="15" fill="rgb(238,207,15)" fg:x="13" fg:w="19"/><text x="8.8593%" y="655.50">core::ptr::drop_in_..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (19 samples, 12.58%)</title><rect x="8.6093%" y="629" width="12.5828%" height="15" fill="rgb(213,199,42)" fg:x="13" fg:w="19"/><text x="8.8593%" y="639.50">core::ptr::drop_in_..</text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt; (19 samples, 12.58%)</title><rect x="8.6093%" y="613" width="12.5828%" height="15" fill="rgb(235,201,11)" fg:x="13" fg:w="19"/><text x="8.8593%" y="623.50">core::ptr::drop_in_..</text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::map::Utf8BoundedMap&gt; (19 samples, 12.58%)</title><rect x="8.6093%" y="597" width="12.5828%" height="15" fill="rgb(207,46,11)" fg:x="13" fg:w="19"/><text x="8.8593%" y="607.50">core::ptr::drop_in_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (19 samples, 12.58%)</title><rect x="8.6093%" y="581" width="12.5828%" height="15" fill="rgb(241,35,35)" fg:x="13" fg:w="19"/><text x="8.8593%" y="591.50">core::ptr::drop_in_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry&gt;&gt; (1 samples, 0.66%)</title><rect x="20.5298%" y="565" width="0.6623%" height="15" fill="rgb(243,32,47)" fg:x="31" fg:w="1"/><text x="20.7798%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="20.5298%" y="549" width="0.6623%" height="15" fill="rgb(247,202,23)" fg:x="31" fg:w="1"/><text x="20.7798%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.66%)</title><rect x="20.5298%" y="533" width="0.6623%" height="15" fill="rgb(219,102,11)" fg:x="31" fg:w="1"/><text x="20.7798%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.66%)</title><rect x="20.5298%" y="517" width="0.6623%" height="15" fill="rgb(243,110,44)" fg:x="31" fg:w="1"/><text x="20.7798%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.66%)</title><rect x="20.5298%" y="501" width="0.6623%" height="15" fill="rgb(222,74,54)" fg:x="31" fg:w="1"/><text x="20.7798%" y="511.50"></text></g><g><title>__GI___libc_free (1 samples, 0.66%)</title><rect x="20.5298%" y="485" width="0.6623%" height="15" fill="rgb(216,99,12)" fg:x="31" fg:w="1"/><text x="20.7798%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (21 samples, 13.91%)</title><rect x="7.9470%" y="661" width="13.9073%" height="15" fill="rgb(226,22,26)" fg:x="12" fg:w="21"/><text x="8.1970%" y="671.50">core::ptr::drop_in_pl..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.66%)</title><rect x="21.1921%" y="645" width="0.6623%" height="15" fill="rgb(217,163,10)" fg:x="32" fg:w="1"/><text x="21.4421%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.66%)</title><rect x="21.1921%" y="629" width="0.6623%" height="15" fill="rgb(213,25,53)" fg:x="32" fg:w="1"/><text x="21.4421%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt; (1 samples, 0.66%)</title><rect x="21.1921%" y="613" width="0.6623%" height="15" fill="rgb(252,105,26)" fg:x="32" fg:w="1"/><text x="21.4421%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::range_trie::State&gt;&gt; (1 samples, 0.66%)</title><rect x="21.1921%" y="597" width="0.6623%" height="15" fill="rgb(220,39,43)" fg:x="32" fg:w="1"/><text x="21.4421%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="21.1921%" y="581" width="0.6623%" height="15" fill="rgb(229,68,48)" fg:x="32" fg:w="1"/><text x="21.4421%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::range_trie::State]&gt; (1 samples, 0.66%)</title><rect x="21.1921%" y="565" width="0.6623%" height="15" fill="rgb(252,8,32)" fg:x="32" fg:w="1"/><text x="21.4421%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::range_trie::State&gt; (1 samples, 0.66%)</title><rect x="21.1921%" y="549" width="0.6623%" height="15" fill="rgb(223,20,43)" fg:x="32" fg:w="1"/><text x="21.4421%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::range_trie::Transition&gt;&gt; (1 samples, 0.66%)</title><rect x="21.1921%" y="533" width="0.6623%" height="15" fill="rgb(229,81,49)" fg:x="32" fg:w="1"/><text x="21.4421%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::range_trie::Transition&gt;&gt; (1 samples, 0.66%)</title><rect x="21.1921%" y="517" width="0.6623%" height="15" fill="rgb(236,28,36)" fg:x="32" fg:w="1"/><text x="21.4421%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="21.1921%" y="501" width="0.6623%" height="15" fill="rgb(249,185,26)" fg:x="32" fg:w="1"/><text x="21.4421%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 3.97%)</title><rect x="21.8543%" y="629" width="3.9735%" height="15" fill="rgb(249,174,33)" fg:x="33" fg:w="6"/><text x="22.1043%" y="639.50">rege..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 3.97%)</title><rect x="21.8543%" y="613" width="3.9735%" height="15" fill="rgb(233,201,37)" fg:x="33" fg:w="6"/><text x="22.1043%" y="623.50">&lt;cor..</text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.66%)</title><rect x="25.8278%" y="629" width="0.6623%" height="15" fill="rgb(221,78,26)" fg:x="39" fg:w="1"/><text x="26.0778%" y="639.50"></text></g><g><title>regex_automata::hybrid::dfa::Config::overwrite (1 samples, 0.66%)</title><rect x="25.8278%" y="613" width="0.6623%" height="15" fill="rgb(250,127,30)" fg:x="39" fg:w="1"/><text x="26.0778%" y="623.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::new (1 samples, 0.66%)</title><rect x="26.4901%" y="629" width="0.6623%" height="15" fill="rgb(230,49,44)" fg:x="40" fg:w="1"/><text x="26.7401%" y="639.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.66%)</title><rect x="26.4901%" y="613" width="0.6623%" height="15" fill="rgb(229,67,23)" fg:x="40" fg:w="1"/><text x="26.7401%" y="623.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.66%)</title><rect x="26.4901%" y="597" width="0.6623%" height="15" fill="rgb(249,83,47)" fg:x="40" fg:w="1"/><text x="26.7401%" y="607.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::clear (1 samples, 0.66%)</title><rect x="26.4901%" y="581" width="0.6623%" height="15" fill="rgb(215,43,3)" fg:x="40" fg:w="1"/><text x="26.7401%" y="591.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.66%)</title><rect x="26.4901%" y="565" width="0.6623%" height="15" fill="rgb(238,154,13)" fg:x="40" fg:w="1"/><text x="26.7401%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.66%)</title><rect x="26.4901%" y="549" width="0.6623%" height="15" fill="rgb(219,56,2)" fg:x="40" fg:w="1"/><text x="26.7401%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.66%)</title><rect x="26.4901%" y="533" width="0.6623%" height="15" fill="rgb(233,0,4)" fg:x="40" fg:w="1"/><text x="26.7401%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.66%)</title><rect x="26.4901%" y="517" width="0.6623%" height="15" fill="rgb(235,30,7)" fg:x="40" fg:w="1"/><text x="26.7401%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="26.4901%" y="501" width="0.6623%" height="15" fill="rgb(250,79,13)" fg:x="40" fg:w="1"/><text x="26.7401%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="26.4901%" y="485" width="0.6623%" height="15" fill="rgb(211,146,34)" fg:x="40" fg:w="1"/><text x="26.7401%" y="495.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.66%)</title><rect x="26.4901%" y="469" width="0.6623%" height="15" fill="rgb(228,22,38)" fg:x="40" fg:w="1"/><text x="26.7401%" y="479.50"></text></g><g><title>tcache_get (1 samples, 0.66%)</title><rect x="26.4901%" y="453" width="0.6623%" height="15" fill="rgb(235,168,5)" fg:x="40" fg:w="1"/><text x="26.7401%" y="463.50"></text></g><g><title>tcache_get_n (1 samples, 0.66%)</title><rect x="26.4901%" y="437" width="0.6623%" height="15" fill="rgb(221,155,16)" fg:x="40" fg:w="1"/><text x="26.7401%" y="447.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 5.96%)</title><rect x="21.8543%" y="661" width="5.9603%" height="15" fill="rgb(215,215,53)" fg:x="33" fg:w="9"/><text x="22.1043%" y="671.50">regex_au..</text></g><g><title>regex_automata::meta::wrappers::HybridEngine::new (9 samples, 5.96%)</title><rect x="21.8543%" y="645" width="5.9603%" height="15" fill="rgb(223,4,10)" fg:x="33" fg:w="9"/><text x="22.1043%" y="655.50">regex_au..</text></g><g><title>regex_automata::hybrid::dfa::Config::match_kind (1 samples, 0.66%)</title><rect x="27.1523%" y="629" width="0.6623%" height="15" fill="rgb(234,103,6)" fg:x="41" fg:w="1"/><text x="27.4023%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::dfa::onepass::InternalBuilder&gt; (1 samples, 0.66%)</title><rect x="29.1391%" y="597" width="0.6623%" height="15" fill="rgb(227,97,0)" fg:x="44" fg:w="1"/><text x="29.3891%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(regex_automata::util::primitives::StateID,regex_automata::dfa::onepass::Epsilons)&gt;&gt; (1 samples, 0.66%)</title><rect x="29.1391%" y="581" width="0.6623%" height="15" fill="rgb(234,150,53)" fg:x="44" fg:w="1"/><text x="29.3891%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(regex_automata::util::primitives::StateID,regex_automata::dfa::onepass::Epsilons)&gt;&gt; (1 samples, 0.66%)</title><rect x="29.1391%" y="565" width="0.6623%" height="15" fill="rgb(228,201,54)" fg:x="44" fg:w="1"/><text x="29.3891%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="29.1391%" y="549" width="0.6623%" height="15" fill="rgb(222,22,37)" fg:x="44" fg:w="1"/><text x="29.3891%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.66%)</title><rect x="29.1391%" y="533" width="0.6623%" height="15" fill="rgb(237,53,32)" fg:x="44" fg:w="1"/><text x="29.3891%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.66%)</title><rect x="29.1391%" y="517" width="0.6623%" height="15" fill="rgb(233,25,53)" fg:x="44" fg:w="1"/><text x="29.3891%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.66%)</title><rect x="29.1391%" y="501" width="0.6623%" height="15" fill="rgb(210,40,34)" fg:x="44" fg:w="1"/><text x="29.3891%" y="511.50"></text></g><g><title>__GI___libc_free (1 samples, 0.66%)</title><rect x="29.1391%" y="485" width="0.6623%" height="15" fill="rgb(241,220,44)" fg:x="44" fg:w="1"/><text x="29.3891%" y="495.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::build (4 samples, 2.65%)</title><rect x="27.8146%" y="613" width="2.6490%" height="15" fill="rgb(235,28,35)" fg:x="42" fg:w="4"/><text x="28.0646%" y="623.50">re..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.66%)</title><rect x="29.8013%" y="597" width="0.6623%" height="15" fill="rgb(210,56,17)" fg:x="45" fg:w="1"/><text x="30.0513%" y="607.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.66%)</title><rect x="29.8013%" y="581" width="0.6623%" height="15" fill="rgb(224,130,29)" fg:x="45" fg:w="1"/><text x="30.0513%" y="591.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_empty_state (1 samples, 0.66%)</title><rect x="29.8013%" y="565" width="0.6623%" height="15" fill="rgb(235,212,8)" fg:x="45" fg:w="1"/><text x="30.0513%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.66%)</title><rect x="29.8013%" y="549" width="0.6623%" height="15" fill="rgb(223,33,50)" fg:x="45" fg:w="1"/><text x="30.0513%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.66%)</title><rect x="29.8013%" y="533" width="0.6623%" height="15" fill="rgb(219,149,13)" fg:x="45" fg:w="1"/><text x="30.0513%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.66%)</title><rect x="29.8013%" y="517" width="0.6623%" height="15" fill="rgb(250,156,29)" fg:x="45" fg:w="1"/><text x="30.0513%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (1 samples, 0.66%)</title><rect x="29.8013%" y="501" width="0.6623%" height="15" fill="rgb(216,193,19)" fg:x="45" fg:w="1"/><text x="30.0513%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (1 samples, 0.66%)</title><rect x="29.8013%" y="485" width="0.6623%" height="15" fill="rgb(216,135,14)" fg:x="45" fg:w="1"/><text x="30.0513%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.66%)</title><rect x="29.8013%" y="469" width="0.6623%" height="15" fill="rgb(241,47,5)" fg:x="45" fg:w="1"/><text x="30.0513%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each::check::{{closure}} (1 samples, 0.66%)</title><rect x="29.8013%" y="453" width="0.6623%" height="15" fill="rgb(233,42,35)" fg:x="45" fg:w="1"/><text x="30.0513%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (1 samples, 0.66%)</title><rect x="29.8013%" y="437" width="0.6623%" height="15" fill="rgb(231,13,6)" fg:x="45" fg:w="1"/><text x="30.0513%" y="447.50"></text></g><g><title>core::ptr::write (1 samples, 0.66%)</title><rect x="29.8013%" y="421" width="0.6623%" height="15" fill="rgb(207,181,40)" fg:x="45" fg:w="1"/><text x="30.0513%" y="431.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.66%)</title><rect x="29.8013%" y="405" width="0.6623%" height="15" fill="rgb(254,173,49)" fg:x="45" fg:w="1"/><text x="30.0513%" y="415.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (5 samples, 3.31%)</title><rect x="27.8146%" y="661" width="3.3113%" height="15" fill="rgb(221,1,38)" fg:x="42" fg:w="5"/><text x="28.0646%" y="671.50">reg..</text></g><g><title>regex_automata::meta::wrappers::OnePassEngine::new (5 samples, 3.31%)</title><rect x="27.8146%" y="645" width="3.3113%" height="15" fill="rgb(206,124,46)" fg:x="42" fg:w="5"/><text x="28.0646%" y="655.50">reg..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 3.31%)</title><rect x="27.8146%" y="629" width="3.3113%" height="15" fill="rgb(249,21,11)" fg:x="42" fg:w="5"/><text x="28.0646%" y="639.50">reg..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::new (1 samples, 0.66%)</title><rect x="30.4636%" y="613" width="0.6623%" height="15" fill="rgb(222,201,40)" fg:x="46" fg:w="1"/><text x="30.7136%" y="623.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSet::new (1 samples, 0.66%)</title><rect x="30.4636%" y="597" width="0.6623%" height="15" fill="rgb(235,61,29)" fg:x="46" fg:w="1"/><text x="30.7136%" y="607.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSet::resize (1 samples, 0.66%)</title><rect x="30.4636%" y="581" width="0.6623%" height="15" fill="rgb(219,207,3)" fg:x="46" fg:w="1"/><text x="30.7136%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (1 samples, 0.66%)</title><rect x="30.4636%" y="565" width="0.6623%" height="15" fill="rgb(222,56,46)" fg:x="46" fg:w="1"/><text x="30.7136%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.66%)</title><rect x="30.4636%" y="549" width="0.6623%" height="15" fill="rgb(239,76,54)" fg:x="46" fg:w="1"/><text x="30.7136%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.66%)</title><rect x="30.4636%" y="533" width="0.6623%" height="15" fill="rgb(231,124,27)" fg:x="46" fg:w="1"/><text x="30.7136%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.66%)</title><rect x="30.4636%" y="517" width="0.6623%" height="15" fill="rgb(249,195,6)" fg:x="46" fg:w="1"/><text x="30.7136%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.66%)</title><rect x="30.4636%" y="501" width="0.6623%" height="15" fill="rgb(237,174,47)" fg:x="46" fg:w="1"/><text x="30.7136%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.66%)</title><rect x="30.4636%" y="485" width="0.6623%" height="15" fill="rgb(206,201,31)" fg:x="46" fg:w="1"/><text x="30.7136%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="30.4636%" y="469" width="0.6623%" height="15" fill="rgb(231,57,52)" fg:x="46" fg:w="1"/><text x="30.7136%" y="479.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.66%)</title><rect x="31.1258%" y="661" width="0.6623%" height="15" fill="rgb(248,177,22)" fg:x="47" fg:w="1"/><text x="31.3758%" y="671.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVMEngine::new (1 samples, 0.66%)</title><rect x="31.1258%" y="645" width="0.6623%" height="15" fill="rgb(215,211,37)" fg:x="47" fg:w="1"/><text x="31.3758%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::pikevm::Builder&gt; (1 samples, 0.66%)</title><rect x="31.1258%" y="629" width="0.6623%" height="15" fill="rgb(241,128,51)" fg:x="47" fg:w="1"/><text x="31.3758%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.66%)</title><rect x="31.1258%" y="613" width="0.6623%" height="15" fill="rgb(227,165,31)" fg:x="47" fg:w="1"/><text x="31.3758%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.66%)</title><rect x="31.1258%" y="597" width="0.6623%" height="15" fill="rgb(228,167,24)" fg:x="47" fg:w="1"/><text x="31.3758%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.66%)</title><rect x="31.1258%" y="581" width="0.6623%" height="15" fill="rgb(228,143,12)" fg:x="47" fg:w="1"/><text x="31.3758%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt; (1 samples, 0.66%)</title><rect x="31.1258%" y="565" width="0.6623%" height="15" fill="rgb(249,149,8)" fg:x="47" fg:w="1"/><text x="31.3758%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::range_trie::State&gt;&gt; (1 samples, 0.66%)</title><rect x="31.1258%" y="549" width="0.6623%" height="15" fill="rgb(243,35,44)" fg:x="47" fg:w="1"/><text x="31.3758%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::range_trie::State&gt;&gt; (1 samples, 0.66%)</title><rect x="31.1258%" y="533" width="0.6623%" height="15" fill="rgb(246,89,9)" fg:x="47" fg:w="1"/><text x="31.3758%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="31.1258%" y="517" width="0.6623%" height="15" fill="rgb(233,213,13)" fg:x="47" fg:w="1"/><text x="31.3758%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.66%)</title><rect x="31.1258%" y="501" width="0.6623%" height="15" fill="rgb(233,141,41)" fg:x="47" fg:w="1"/><text x="31.3758%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.66%)</title><rect x="31.1258%" y="485" width="0.6623%" height="15" fill="rgb(239,167,4)" fg:x="47" fg:w="1"/><text x="31.3758%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.66%)</title><rect x="31.1258%" y="469" width="0.6623%" height="15" fill="rgb(209,217,16)" fg:x="47" fg:w="1"/><text x="31.3758%" y="479.50"></text></g><g><title>__GI___libc_free (1 samples, 0.66%)</title><rect x="31.1258%" y="453" width="0.6623%" height="15" fill="rgb(219,88,35)" fg:x="47" fg:w="1"/><text x="31.3758%" y="463.50"></text></g><g><title>_int_free (1 samples, 0.66%)</title><rect x="31.1258%" y="437" width="0.6623%" height="15" fill="rgb(220,193,23)" fg:x="47" fg:w="1"/><text x="31.3758%" y="447.50"></text></g><g><title>&lt;regex_automata::nfa::thompson::nfa::Inner as core::default::Default&gt;::default (2 samples, 1.32%)</title><rect x="31.7881%" y="613" width="1.3245%" height="15" fill="rgb(230,90,52)" fg:x="48" fg:w="2"/><text x="32.0381%" y="623.50"></text></g><g><title>&lt;regex_automata::util::alphabet::ByteClasses as core::default::Default&gt;::default (2 samples, 1.32%)</title><rect x="31.7881%" y="597" width="1.3245%" height="15" fill="rgb(252,106,19)" fg:x="48" fg:w="2"/><text x="32.0381%" y="607.50"></text></g><g><title>regex_automata::util::alphabet::ByteClasses::singletons (2 samples, 1.32%)</title><rect x="31.7881%" y="581" width="1.3245%" height="15" fill="rgb(206,74,20)" fg:x="48" fg:w="2"/><text x="32.0381%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 1.32%)</title><rect x="33.1126%" y="581" width="1.3245%" height="15" fill="rgb(230,138,44)" fg:x="50" fg:w="2"/><text x="33.3626%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (2 samples, 1.32%)</title><rect x="33.1126%" y="565" width="1.3245%" height="15" fill="rgb(235,182,43)" fg:x="50" fg:w="2"/><text x="33.3626%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (2 samples, 1.32%)</title><rect x="33.1126%" y="549" width="1.3245%" height="15" fill="rgb(242,16,51)" fg:x="50" fg:w="2"/><text x="33.3626%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 1.32%)</title><rect x="33.1126%" y="533" width="1.3245%" height="15" fill="rgb(248,9,4)" fg:x="50" fg:w="2"/><text x="33.3626%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 1.32%)</title><rect x="33.1126%" y="517" width="1.3245%" height="15" fill="rgb(210,31,22)" fg:x="50" fg:w="2"/><text x="33.3626%" y="527.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 1.32%)</title><rect x="33.1126%" y="501" width="1.3245%" height="15" fill="rgb(239,54,39)" fg:x="50" fg:w="2"/><text x="33.3626%" y="511.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 1.32%)</title><rect x="33.1126%" y="485" width="1.3245%" height="15" fill="rgb(230,99,41)" fg:x="50" fg:w="2"/><text x="33.3626%" y="495.50"></text></g><g><title>__GI___libc_realloc (2 samples, 1.32%)</title><rect x="33.1126%" y="469" width="1.3245%" height="15" fill="rgb(253,106,12)" fg:x="50" fg:w="2"/><text x="33.3626%" y="479.50"></text></g><g><title>_int_realloc (1 samples, 0.66%)</title><rect x="33.7748%" y="453" width="0.6623%" height="15" fill="rgb(213,46,41)" fg:x="51" fg:w="1"/><text x="34.0248%" y="463.50"></text></g><g><title>_int_malloc (1 samples, 0.66%)</title><rect x="33.7748%" y="437" width="0.6623%" height="15" fill="rgb(215,133,35)" fg:x="51" fg:w="1"/><text x="34.0248%" y="447.50"></text></g><g><title>malloc_consolidate (1 samples, 0.66%)</title><rect x="33.7748%" y="421" width="0.6623%" height="15" fill="rgb(213,28,5)" fg:x="51" fg:w="1"/><text x="34.0248%" y="431.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 2.65%)</title><rect x="33.1126%" y="613" width="2.6490%" height="15" fill="rgb(215,77,49)" fg:x="50" fg:w="4"/><text x="33.3626%" y="623.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 2.65%)</title><rect x="33.1126%" y="597" width="2.6490%" height="15" fill="rgb(248,100,22)" fg:x="50" fg:w="4"/><text x="33.3626%" y="607.50">al..</text></g><g><title>core::ptr::write (2 samples, 1.32%)</title><rect x="34.4371%" y="581" width="1.3245%" height="15" fill="rgb(208,67,9)" fg:x="52" fg:w="2"/><text x="34.6871%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.66%)</title><rect x="35.7616%" y="597" width="0.6623%" height="15" fill="rgb(219,133,21)" fg:x="54" fg:w="1"/><text x="36.0116%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.66%)</title><rect x="35.7616%" y="581" width="0.6623%" height="15" fill="rgb(246,46,29)" fg:x="54" fg:w="1"/><text x="36.0116%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.66%)</title><rect x="35.7616%" y="565" width="0.6623%" height="15" fill="rgb(246,185,52)" fg:x="54" fg:w="1"/><text x="36.0116%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="35.7616%" y="549" width="0.6623%" height="15" fill="rgb(252,136,11)" fg:x="54" fg:w="1"/><text x="36.0116%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.66%)</title><rect x="35.7616%" y="533" width="0.6623%" height="15" fill="rgb(219,138,53)" fg:x="54" fg:w="1"/><text x="36.0116%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 5.96%)</title><rect x="31.7881%" y="629" width="5.9603%" height="15" fill="rgb(211,51,23)" fg:x="48" fg:w="9"/><text x="32.0381%" y="639.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 1.99%)</title><rect x="35.7616%" y="613" width="1.9868%" height="15" fill="rgb(247,221,28)" fg:x="54" fg:w="3"/><text x="36.0116%" y="623.50">r..</text></g><g><title>regex_automata::util::alphabet::ByteClassSet::byte_classes (2 samples, 1.32%)</title><rect x="36.4238%" y="597" width="1.3245%" height="15" fill="rgb(251,222,45)" fg:x="55" fg:w="2"/><text x="36.6738%" y="607.50"></text></g><g><title>regex_automata::util::alphabet::ByteSet::contains (2 samples, 1.32%)</title><rect x="36.4238%" y="581" width="1.3245%" height="15" fill="rgb(217,162,53)" fg:x="55" fg:w="2"/><text x="36.6738%" y="591.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::add_capture_start (1 samples, 0.66%)</title><rect x="37.7483%" y="533" width="0.6623%" height="15" fill="rgb(229,93,14)" fg:x="57" fg:w="1"/><text x="37.9983%" y="543.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.66%)</title><rect x="37.7483%" y="517" width="0.6623%" height="15" fill="rgb(209,67,49)" fg:x="57" fg:w="1"/><text x="37.9983%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.66%)</title><rect x="37.7483%" y="501" width="0.6623%" height="15" fill="rgb(213,87,29)" fg:x="57" fg:w="1"/><text x="37.9983%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.66%)</title><rect x="37.7483%" y="485" width="0.6623%" height="15" fill="rgb(205,151,52)" fg:x="57" fg:w="1"/><text x="37.9983%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.66%)</title><rect x="37.7483%" y="469" width="0.6623%" height="15" fill="rgb(253,215,39)" fg:x="57" fg:w="1"/><text x="37.9983%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="37.7483%" y="453" width="0.6623%" height="15" fill="rgb(221,220,41)" fg:x="57" fg:w="1"/><text x="37.9983%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="37.7483%" y="437" width="0.6623%" height="15" fill="rgb(218,133,21)" fg:x="57" fg:w="1"/><text x="37.9983%" y="447.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (1 samples, 0.66%)</title><rect x="38.4106%" y="485" width="0.6623%" height="15" fill="rgb(221,193,43)" fg:x="58" fg:w="1"/><text x="38.6606%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::add_empty (1 samples, 0.66%)</title><rect x="38.4106%" y="469" width="0.6623%" height="15" fill="rgb(240,128,52)" fg:x="58" fg:w="1"/><text x="38.6606%" y="479.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_empty (1 samples, 0.66%)</title><rect x="38.4106%" y="453" width="0.6623%" height="15" fill="rgb(253,114,12)" fg:x="58" fg:w="1"/><text x="38.6606%" y="463.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.66%)</title><rect x="38.4106%" y="437" width="0.6623%" height="15" fill="rgb(215,223,47)" fg:x="58" fg:w="1"/><text x="38.6606%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.66%)</title><rect x="38.4106%" y="421" width="0.6623%" height="15" fill="rgb(248,225,23)" fg:x="58" fg:w="1"/><text x="38.6606%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.66%)</title><rect x="38.4106%" y="405" width="0.6623%" height="15" fill="rgb(250,108,0)" fg:x="58" fg:w="1"/><text x="38.6606%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.66%)</title><rect x="38.4106%" y="389" width="0.6623%" height="15" fill="rgb(228,208,7)" fg:x="58" fg:w="1"/><text x="38.6606%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="38.4106%" y="373" width="0.6623%" height="15" fill="rgb(244,45,10)" fg:x="58" fg:w="1"/><text x="38.6606%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="38.4106%" y="357" width="0.6623%" height="15" fill="rgb(207,125,25)" fg:x="58" fg:w="1"/><text x="38.6606%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.66%)</title><rect x="38.4106%" y="341" width="0.6623%" height="15" fill="rgb(210,195,18)" fg:x="58" fg:w="1"/><text x="38.6606%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.66%)</title><rect x="38.4106%" y="325" width="0.6623%" height="15" fill="rgb(249,80,12)" fg:x="58" fg:w="1"/><text x="38.6606%" y="335.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.66%)</title><rect x="38.4106%" y="309" width="0.6623%" height="15" fill="rgb(221,65,9)" fg:x="58" fg:w="1"/><text x="38.6606%" y="319.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.66%)</title><rect x="38.4106%" y="293" width="0.6623%" height="15" fill="rgb(235,49,36)" fg:x="58" fg:w="1"/><text x="38.6606%" y="303.50"></text></g><g><title>_int_realloc (1 samples, 0.66%)</title><rect x="38.4106%" y="277" width="0.6623%" height="15" fill="rgb(225,32,20)" fg:x="58" fg:w="1"/><text x="38.6606%" y="287.50"></text></g><g><title>__GI_memcpy (1 samples, 0.66%)</title><rect x="38.4106%" y="261" width="0.6623%" height="15" fill="rgb(215,141,46)" fg:x="58" fg:w="1"/><text x="38.6606%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.66%)</title><rect x="38.4106%" y="245" width="0.6623%" height="15" fill="rgb(250,160,47)" fg:x="58" fg:w="1"/><text x="38.6606%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (4 samples, 2.65%)</title><rect x="38.4106%" y="533" width="2.6490%" height="15" fill="rgb(216,222,40)" fg:x="58" fg:w="4"/><text x="38.6606%" y="543.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 2.65%)</title><rect x="38.4106%" y="517" width="2.6490%" height="15" fill="rgb(234,217,39)" fg:x="58" fg:w="4"/><text x="38.6606%" y="527.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (4 samples, 2.65%)</title><rect x="38.4106%" y="501" width="2.6490%" height="15" fill="rgb(207,178,40)" fg:x="58" fg:w="4"/><text x="38.6606%" y="511.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (3 samples, 1.99%)</title><rect x="39.0728%" y="485" width="1.9868%" height="15" fill="rgb(221,136,13)" fg:x="59" fg:w="3"/><text x="39.3228%" y="495.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (3 samples, 1.99%)</title><rect x="39.0728%" y="469" width="1.9868%" height="15" fill="rgb(249,199,10)" fg:x="59" fg:w="3"/><text x="39.3228%" y="479.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (3 samples, 1.99%)</title><rect x="39.0728%" y="453" width="1.9868%" height="15" fill="rgb(249,222,13)" fg:x="59" fg:w="3"/><text x="39.3228%" y="463.50">r..</text></g><g><title>alloc::vec::from_elem (3 samples, 1.99%)</title><rect x="39.0728%" y="437" width="1.9868%" height="15" fill="rgb(244,185,38)" fg:x="59" fg:w="3"/><text x="39.3228%" y="447.50">a..</text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3 samples, 1.99%)</title><rect x="39.0728%" y="421" width="1.9868%" height="15" fill="rgb(236,202,9)" fg:x="59" fg:w="3"/><text x="39.3228%" y="431.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (3 samples, 1.99%)</title><rect x="39.0728%" y="405" width="1.9868%" height="15" fill="rgb(250,229,37)" fg:x="59" fg:w="3"/><text x="39.3228%" y="415.50">a..</text></g><g><title>core::ptr::write (3 samples, 1.99%)</title><rect x="39.0728%" y="389" width="1.9868%" height="15" fill="rgb(206,174,23)" fg:x="59" fg:w="3"/><text x="39.3228%" y="399.50">c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::add_capture_end (1 samples, 0.66%)</title><rect x="41.0596%" y="517" width="0.6623%" height="15" fill="rgb(211,33,43)" fg:x="62" fg:w="1"/><text x="41.3096%" y="527.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_end (1 samples, 0.66%)</title><rect x="41.0596%" y="501" width="0.6623%" height="15" fill="rgb(245,58,50)" fg:x="62" fg:w="1"/><text x="41.3096%" y="511.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.66%)</title><rect x="41.0596%" y="485" width="0.6623%" height="15" fill="rgb(244,68,36)" fg:x="62" fg:w="1"/><text x="41.3096%" y="495.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::add_empty (1 samples, 0.66%)</title><rect x="41.7219%" y="245" width="0.6623%" height="15" fill="rgb(232,229,15)" fg:x="63" fg:w="1"/><text x="41.9719%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_empty (1 samples, 0.66%)</title><rect x="41.7219%" y="229" width="0.6623%" height="15" fill="rgb(254,30,23)" fg:x="63" fg:w="1"/><text x="41.9719%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.66%)</title><rect x="41.7219%" y="213" width="0.6623%" height="15" fill="rgb(235,160,14)" fg:x="63" fg:w="1"/><text x="41.9719%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.66%)</title><rect x="41.7219%" y="197" width="0.6623%" height="15" fill="rgb(212,155,44)" fg:x="63" fg:w="1"/><text x="41.9719%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.66%)</title><rect x="41.7219%" y="181" width="0.6623%" height="15" fill="rgb(226,2,50)" fg:x="63" fg:w="1"/><text x="41.9719%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.66%)</title><rect x="41.7219%" y="165" width="0.6623%" height="15" fill="rgb(234,177,6)" fg:x="63" fg:w="1"/><text x="41.9719%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="41.7219%" y="149" width="0.6623%" height="15" fill="rgb(217,24,9)" fg:x="63" fg:w="1"/><text x="41.9719%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="41.7219%" y="133" width="0.6623%" height="15" fill="rgb(220,13,46)" fg:x="63" fg:w="1"/><text x="41.9719%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.66%)</title><rect x="41.7219%" y="117" width="0.6623%" height="15" fill="rgb(239,221,27)" fg:x="63" fg:w="1"/><text x="41.9719%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.66%)</title><rect x="41.7219%" y="101" width="0.6623%" height="15" fill="rgb(222,198,25)" fg:x="63" fg:w="1"/><text x="41.9719%" y="111.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.66%)</title><rect x="41.7219%" y="85" width="0.6623%" height="15" fill="rgb(211,99,13)" fg:x="63" fg:w="1"/><text x="41.9719%" y="95.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.66%)</title><rect x="41.7219%" y="69" width="0.6623%" height="15" fill="rgb(232,111,31)" fg:x="63" fg:w="1"/><text x="41.9719%" y="79.50"></text></g><g><title>_int_realloc (1 samples, 0.66%)</title><rect x="41.7219%" y="53" width="0.6623%" height="15" fill="rgb(245,82,37)" fg:x="63" fg:w="1"/><text x="41.9719%" y="63.50"></text></g><g><title>_int_malloc (1 samples, 0.66%)</title><rect x="41.7219%" y="37" width="0.6623%" height="15" fill="rgb(227,149,46)" fg:x="63" fg:w="1"/><text x="41.9719%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_range (1 samples, 0.66%)</title><rect x="42.3841%" y="245" width="0.6623%" height="15" fill="rgb(218,36,50)" fg:x="64" fg:w="1"/><text x="42.6341%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::add_range (1 samples, 0.66%)</title><rect x="42.3841%" y="229" width="0.6623%" height="15" fill="rgb(226,80,48)" fg:x="64" fg:w="1"/><text x="42.6341%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_range (1 samples, 0.66%)</title><rect x="42.3841%" y="213" width="0.6623%" height="15" fill="rgb(238,224,15)" fg:x="64" fg:w="1"/><text x="42.6341%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.66%)</title><rect x="42.3841%" y="197" width="0.6623%" height="15" fill="rgb(241,136,10)" fg:x="64" fg:w="1"/><text x="42.6341%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.66%)</title><rect x="42.3841%" y="181" width="0.6623%" height="15" fill="rgb(208,32,45)" fg:x="64" fg:w="1"/><text x="42.6341%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.66%)</title><rect x="42.3841%" y="165" width="0.6623%" height="15" fill="rgb(207,135,9)" fg:x="64" fg:w="1"/><text x="42.6341%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.66%)</title><rect x="42.3841%" y="149" width="0.6623%" height="15" fill="rgb(206,86,44)" fg:x="64" fg:w="1"/><text x="42.6341%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="42.3841%" y="133" width="0.6623%" height="15" fill="rgb(245,177,15)" fg:x="64" fg:w="1"/><text x="42.6341%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="42.3841%" y="117" width="0.6623%" height="15" fill="rgb(206,64,50)" fg:x="64" fg:w="1"/><text x="42.6341%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.66%)</title><rect x="42.3841%" y="101" width="0.6623%" height="15" fill="rgb(234,36,40)" fg:x="64" fg:w="1"/><text x="42.6341%" y="111.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.66%)</title><rect x="42.3841%" y="85" width="0.6623%" height="15" fill="rgb(213,64,8)" fg:x="64" fg:w="1"/><text x="42.6341%" y="95.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.66%)</title><rect x="42.3841%" y="69" width="0.6623%" height="15" fill="rgb(210,75,36)" fg:x="64" fg:w="1"/><text x="42.6341%" y="79.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.66%)</title><rect x="42.3841%" y="53" width="0.6623%" height="15" fill="rgb(229,88,21)" fg:x="64" fg:w="1"/><text x="42.6341%" y="63.50"></text></g><g><title>_int_realloc (1 samples, 0.66%)</title><rect x="42.3841%" y="37" width="0.6623%" height="15" fill="rgb(252,204,47)" fg:x="64" fg:w="1"/><text x="42.6341%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::patch (2 samples, 1.32%)</title><rect x="43.0464%" y="245" width="1.3245%" height="15" fill="rgb(208,77,27)" fg:x="65" fg:w="2"/><text x="43.2964%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 1.32%)</title><rect x="43.0464%" y="229" width="1.3245%" height="15" fill="rgb(221,76,26)" fg:x="65" fg:w="2"/><text x="43.2964%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 1.32%)</title><rect x="43.0464%" y="213" width="1.3245%" height="15" fill="rgb(225,139,18)" fg:x="65" fg:w="2"/><text x="43.2964%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.66%)</title><rect x="43.7086%" y="197" width="0.6623%" height="15" fill="rgb(230,137,11)" fg:x="66" fg:w="1"/><text x="43.9586%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.66%)</title><rect x="43.7086%" y="181" width="0.6623%" height="15" fill="rgb(212,28,1)" fg:x="66" fg:w="1"/><text x="43.9586%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="43.7086%" y="165" width="0.6623%" height="15" fill="rgb(248,164,17)" fg:x="66" fg:w="1"/><text x="43.9586%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="43.7086%" y="149" width="0.6623%" height="15" fill="rgb(222,171,42)" fg:x="66" fg:w="1"/><text x="43.9586%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.66%)</title><rect x="43.7086%" y="133" width="0.6623%" height="15" fill="rgb(243,84,45)" fg:x="66" fg:w="1"/><text x="43.9586%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.66%)</title><rect x="43.7086%" y="117" width="0.6623%" height="15" fill="rgb(252,49,23)" fg:x="66" fg:w="1"/><text x="43.9586%" y="127.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.66%)</title><rect x="43.7086%" y="101" width="0.6623%" height="15" fill="rgb(215,19,7)" fg:x="66" fg:w="1"/><text x="43.9586%" y="111.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.66%)</title><rect x="43.7086%" y="85" width="0.6623%" height="15" fill="rgb(238,81,41)" fg:x="66" fg:w="1"/><text x="43.9586%" y="95.50"></text></g><g><title>_int_realloc (1 samples, 0.66%)</title><rect x="43.7086%" y="69" width="0.6623%" height="15" fill="rgb(210,199,37)" fg:x="66" fg:w="1"/><text x="43.9586%" y="79.50"></text></g><g><title>_int_malloc (1 samples, 0.66%)</title><rect x="43.7086%" y="53" width="0.6623%" height="15" fill="rgb(244,192,49)" fg:x="66" fg:w="1"/><text x="43.9586%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 2.65%)</title><rect x="44.3709%" y="245" width="2.6490%" height="15" fill="rgb(226,211,11)" fg:x="67" fg:w="4"/><text x="44.6209%" y="255.50">re..</text></g><g><title>alloc::vec::from_elem (4 samples, 2.65%)</title><rect x="44.3709%" y="229" width="2.6490%" height="15" fill="rgb(236,162,54)" fg:x="67" fg:w="4"/><text x="44.6209%" y="239.50">al..</text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (4 samples, 2.65%)</title><rect x="44.3709%" y="213" width="2.6490%" height="15" fill="rgb(220,229,9)" fg:x="67" fg:w="4"/><text x="44.6209%" y="223.50">&lt;T..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (4 samples, 2.65%)</title><rect x="44.3709%" y="197" width="2.6490%" height="15" fill="rgb(250,87,22)" fg:x="67" fg:w="4"/><text x="44.6209%" y="207.50">al..</text></g><g><title>core::ptr::write (4 samples, 2.65%)</title><rect x="44.3709%" y="181" width="2.6490%" height="15" fill="rgb(239,43,17)" fg:x="67" fg:w="4"/><text x="44.6209%" y="191.50">co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (12 samples, 7.95%)</title><rect x="41.7219%" y="293" width="7.9470%" height="15" fill="rgb(231,177,25)" fg:x="63" fg:w="12"/><text x="41.9719%" y="303.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (12 samples, 7.95%)</title><rect x="41.7219%" y="277" width="7.9470%" height="15" fill="rgb(219,179,1)" fg:x="63" fg:w="12"/><text x="41.9719%" y="287.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class_reverse_with_suffix (12 samples, 7.95%)</title><rect x="41.7219%" y="261" width="7.9470%" height="15" fill="rgb(238,219,53)" fg:x="63" fg:w="12"/><text x="41.9719%" y="271.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::hash (4 samples, 2.65%)</title><rect x="47.0199%" y="245" width="2.6490%" height="15" fill="rgb(232,167,36)" fg:x="71" fg:w="4"/><text x="47.2699%" y="255.50">re..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (13 samples, 8.61%)</title><rect x="41.7219%" y="373" width="8.6093%" height="15" fill="rgb(244,19,51)" fg:x="63" fg:w="13"/><text x="41.9719%" y="383.50">&lt;core::iter:..</text></g><g><title>core::option::Option&lt;T&gt;::map (13 samples, 8.61%)</title><rect x="41.7219%" y="357" width="8.6093%" height="15" fill="rgb(224,6,22)" fg:x="63" fg:w="13"/><text x="41.9719%" y="367.50">core::option..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (13 samples, 8.61%)</title><rect x="41.7219%" y="341" width="8.6093%" height="15" fill="rgb(224,145,5)" fg:x="63" fg:w="13"/><text x="41.9719%" y="351.50">core::ops::f..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (13 samples, 8.61%)</title><rect x="41.7219%" y="325" width="8.6093%" height="15" fill="rgb(234,130,49)" fg:x="63" fg:w="13"/><text x="41.9719%" y="335.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (13 samples, 8.61%)</title><rect x="41.7219%" y="309" width="8.6093%" height="15" fill="rgb(254,6,2)" fg:x="63" fg:w="13"/><text x="41.9719%" y="319.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::patch (1 samples, 0.66%)</title><rect x="49.6689%" y="293" width="0.6623%" height="15" fill="rgb(208,96,46)" fg:x="75" fg:w="1"/><text x="49.9189%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.66%)</title><rect x="49.6689%" y="277" width="0.6623%" height="15" fill="rgb(239,3,39)" fg:x="75" fg:w="1"/><text x="49.9189%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::add_union (1 samples, 0.66%)</title><rect x="50.3311%" y="293" width="0.6623%" height="15" fill="rgb(233,210,1)" fg:x="76" fg:w="1"/><text x="50.5811%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_union (1 samples, 0.66%)</title><rect x="50.3311%" y="277" width="0.6623%" height="15" fill="rgb(244,137,37)" fg:x="76" fg:w="1"/><text x="50.5811%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.66%)</title><rect x="50.3311%" y="261" width="0.6623%" height="15" fill="rgb(240,136,2)" fg:x="76" fg:w="1"/><text x="50.5811%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.66%)</title><rect x="50.3311%" y="245" width="0.6623%" height="15" fill="rgb(239,18,37)" fg:x="76" fg:w="1"/><text x="50.5811%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.66%)</title><rect x="50.3311%" y="229" width="0.6623%" height="15" fill="rgb(218,185,22)" fg:x="76" fg:w="1"/><text x="50.5811%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.66%)</title><rect x="50.3311%" y="213" width="0.6623%" height="15" fill="rgb(225,218,4)" fg:x="76" fg:w="1"/><text x="50.5811%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="50.3311%" y="197" width="0.6623%" height="15" fill="rgb(230,182,32)" fg:x="76" fg:w="1"/><text x="50.5811%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="50.3311%" y="181" width="0.6623%" height="15" fill="rgb(242,56,43)" fg:x="76" fg:w="1"/><text x="50.5811%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.66%)</title><rect x="50.3311%" y="165" width="0.6623%" height="15" fill="rgb(233,99,24)" fg:x="76" fg:w="1"/><text x="50.5811%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.66%)</title><rect x="50.3311%" y="149" width="0.6623%" height="15" fill="rgb(234,209,42)" fg:x="76" fg:w="1"/><text x="50.5811%" y="159.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.66%)</title><rect x="50.3311%" y="133" width="0.6623%" height="15" fill="rgb(227,7,12)" fg:x="76" fg:w="1"/><text x="50.5811%" y="143.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.66%)</title><rect x="50.3311%" y="117" width="0.6623%" height="15" fill="rgb(245,203,43)" fg:x="76" fg:w="1"/><text x="50.5811%" y="127.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.66%)</title><rect x="50.9934%" y="261" width="0.6623%" height="15" fill="rgb(238,205,33)" fg:x="77" fg:w="1"/><text x="51.2434%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::interval::IntervalSetIter&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.66%)</title><rect x="50.9934%" y="245" width="0.6623%" height="15" fill="rgb(231,56,7)" fg:x="77" fg:w="1"/><text x="51.2434%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.66%)</title><rect x="50.9934%" y="229" width="0.6623%" height="15" fill="rgb(244,186,29)" fg:x="77" fg:w="1"/><text x="51.2434%" y="239.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.66%)</title><rect x="50.9934%" y="213" width="0.6623%" height="15" fill="rgb(234,111,31)" fg:x="77" fg:w="1"/><text x="51.2434%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.32%)</title><rect x="51.6556%" y="261" width="1.3245%" height="15" fill="rgb(241,149,10)" fg:x="78" fg:w="2"/><text x="51.9056%" y="271.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::push (2 samples, 1.32%)</title><rect x="51.6556%" y="245" width="1.3245%" height="15" fill="rgb(249,206,44)" fg:x="78" fg:w="2"/><text x="51.9056%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 1.32%)</title><rect x="51.6556%" y="229" width="1.3245%" height="15" fill="rgb(251,153,30)" fg:x="78" fg:w="2"/><text x="51.9056%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 1.32%)</title><rect x="51.6556%" y="213" width="1.3245%" height="15" fill="rgb(239,152,38)" fg:x="78" fg:w="2"/><text x="51.9056%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 1.32%)</title><rect x="51.6556%" y="197" width="1.3245%" height="15" fill="rgb(249,139,47)" fg:x="78" fg:w="2"/><text x="51.9056%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::ptr (2 samples, 1.32%)</title><rect x="51.6556%" y="181" width="1.3245%" height="15" fill="rgb(244,64,35)" fg:x="78" fg:w="2"/><text x="51.9056%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::non_null (2 samples, 1.32%)</title><rect x="51.6556%" y="165" width="1.3245%" height="15" fill="rgb(216,46,15)" fg:x="78" fg:w="2"/><text x="51.9056%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add_suffix (1 samples, 0.66%)</title><rect x="52.9801%" y="245" width="0.6623%" height="15" fill="rgb(250,74,19)" fg:x="80" fg:w="1"/><text x="53.2301%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.66%)</title><rect x="52.9801%" y="229" width="0.6623%" height="15" fill="rgb(249,42,33)" fg:x="80" fg:w="1"/><text x="53.2301%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (6 samples, 3.97%)</title><rect x="53.6424%" y="229" width="3.9735%" height="15" fill="rgb(242,149,17)" fg:x="81" fg:w="6"/><text x="53.8924%" y="239.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::hash (6 samples, 3.97%)</title><rect x="53.6424%" y="213" width="3.9735%" height="15" fill="rgb(244,29,21)" fg:x="81" fg:w="6"/><text x="53.8924%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::pop_freeze (1 samples, 0.66%)</title><rect x="57.6159%" y="229" width="0.6623%" height="15" fill="rgb(220,130,37)" fg:x="87" fg:w="1"/><text x="57.8659%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Node::set_last_transition (1 samples, 0.66%)</title><rect x="57.6159%" y="213" width="0.6623%" height="15" fill="rgb(211,67,2)" fg:x="87" fg:w="1"/><text x="57.8659%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.66%)</title><rect x="57.6159%" y="197" width="0.6623%" height="15" fill="rgb(235,68,52)" fg:x="87" fg:w="1"/><text x="57.8659%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.66%)</title><rect x="57.6159%" y="181" width="0.6623%" height="15" fill="rgb(246,142,3)" fg:x="87" fg:w="1"/><text x="57.8659%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.66%)</title><rect x="57.6159%" y="165" width="0.6623%" height="15" fill="rgb(241,25,7)" fg:x="87" fg:w="1"/><text x="57.8659%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="57.6159%" y="149" width="0.6623%" height="15" fill="rgb(242,119,39)" fg:x="87" fg:w="1"/><text x="57.8659%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="57.6159%" y="133" width="0.6623%" height="15" fill="rgb(241,98,45)" fg:x="87" fg:w="1"/><text x="57.8659%" y="143.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.66%)</title><rect x="57.6159%" y="117" width="0.6623%" height="15" fill="rgb(254,28,30)" fg:x="87" fg:w="1"/><text x="57.8659%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9 samples, 5.96%)</title><rect x="52.9801%" y="261" width="5.9603%" height="15" fill="rgb(241,142,54)" fg:x="80" fg:w="9"/><text x="53.2301%" y="271.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 5.30%)</title><rect x="53.6424%" y="245" width="5.2980%" height="15" fill="rgb(222,85,15)" fg:x="81" fg:w="8"/><text x="53.8924%" y="255.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::top_last_freeze (1 samples, 0.66%)</title><rect x="58.2781%" y="229" width="0.6623%" height="15" fill="rgb(210,85,47)" fg:x="88" fg:w="1"/><text x="58.5281%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Node::set_last_transition (1 samples, 0.66%)</title><rect x="58.2781%" y="213" width="0.6623%" height="15" fill="rgb(224,206,25)" fg:x="88" fg:w="1"/><text x="58.5281%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.66%)</title><rect x="58.2781%" y="197" width="0.6623%" height="15" fill="rgb(243,201,19)" fg:x="88" fg:w="1"/><text x="58.5281%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.66%)</title><rect x="58.2781%" y="181" width="0.6623%" height="15" fill="rgb(236,59,4)" fg:x="88" fg:w="1"/><text x="58.5281%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.66%)</title><rect x="58.2781%" y="165" width="0.6623%" height="15" fill="rgb(254,179,45)" fg:x="88" fg:w="1"/><text x="58.5281%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="58.2781%" y="149" width="0.6623%" height="15" fill="rgb(226,14,10)" fg:x="88" fg:w="1"/><text x="58.5281%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="58.2781%" y="133" width="0.6623%" height="15" fill="rgb(244,27,41)" fg:x="88" fg:w="1"/><text x="58.5281%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.66%)</title><rect x="58.2781%" y="117" width="0.6623%" height="15" fill="rgb(235,35,32)" fg:x="88" fg:w="1"/><text x="58.5281%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.66%)</title><rect x="58.2781%" y="101" width="0.6623%" height="15" fill="rgb(218,68,31)" fg:x="88" fg:w="1"/><text x="58.5281%" y="111.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.66%)</title><rect x="58.2781%" y="85" width="0.6623%" height="15" fill="rgb(207,120,37)" fg:x="88" fg:w="1"/><text x="58.5281%" y="95.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.66%)</title><rect x="58.2781%" y="69" width="0.6623%" height="15" fill="rgb(227,98,0)" fg:x="88" fg:w="1"/><text x="58.5281%" y="79.50"></text></g><g><title>_int_realloc (1 samples, 0.66%)</title><rect x="58.2781%" y="53" width="0.6623%" height="15" fill="rgb(207,7,3)" fg:x="88" fg:w="1"/><text x="58.5281%" y="63.50"></text></g><g><title>_int_malloc (1 samples, 0.66%)</title><rect x="58.2781%" y="37" width="0.6623%" height="15" fill="rgb(206,98,19)" fg:x="88" fg:w="1"/><text x="58.5281%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (29 samples, 19.21%)</title><rect x="58.9404%" y="261" width="19.2053%" height="15" fill="rgb(217,5,26)" fg:x="89" fg:w="29"/><text x="59.1904%" y="271.50">regex_automata::nfa::thompson:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8State::clear (29 samples, 19.21%)</title><rect x="58.9404%" y="245" width="19.2053%" height="15" fill="rgb(235,190,38)" fg:x="89" fg:w="29"/><text x="59.1904%" y="255.50">regex_automata::nfa::thompson:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (29 samples, 19.21%)</title><rect x="58.9404%" y="229" width="19.2053%" height="15" fill="rgb(247,86,24)" fg:x="89" fg:w="29"/><text x="59.1904%" y="239.50">regex_automata::nfa::thompson:..</text></g><g><title>alloc::vec::from_elem (29 samples, 19.21%)</title><rect x="58.9404%" y="213" width="19.2053%" height="15" fill="rgb(205,101,16)" fg:x="89" fg:w="29"/><text x="59.1904%" y="223.50">alloc::vec::from_elem</text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (29 samples, 19.21%)</title><rect x="58.9404%" y="197" width="19.2053%" height="15" fill="rgb(246,168,33)" fg:x="89" fg:w="29"/><text x="59.1904%" y="207.50">&lt;T as alloc::vec::spec_from_el..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (29 samples, 19.21%)</title><rect x="58.9404%" y="181" width="19.2053%" height="15" fill="rgb(231,114,1)" fg:x="89" fg:w="29"/><text x="59.1904%" y="191.50">alloc::vec::Vec&lt;T,A&gt;::extend_w..</text></g><g><title>core::ptr::write (29 samples, 19.21%)</title><rect x="58.9404%" y="165" width="19.2053%" height="15" fill="rgb(207,184,53)" fg:x="89" fg:w="29"/><text x="59.1904%" y="175.50">core::ptr::write</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (44 samples, 29.14%)</title><rect x="50.9934%" y="293" width="29.1391%" height="15" fill="rgb(224,95,51)" fg:x="77" fg:w="44"/><text x="51.2434%" y="303.50">regex_automata::nfa::thompson::compiler::Compil..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (44 samples, 29.14%)</title><rect x="50.9934%" y="277" width="29.1391%" height="15" fill="rgb(212,188,45)" fg:x="77" fg:w="44"/><text x="51.2434%" y="287.50">regex_automata::nfa::thompson::compiler::Compil..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 1.99%)</title><rect x="78.1457%" y="261" width="1.9868%" height="15" fill="rgb(223,154,38)" fg:x="118" fg:w="3"/><text x="78.3957%" y="271.50">r..</text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 1.99%)</title><rect x="78.1457%" y="245" width="1.9868%" height="15" fill="rgb(251,22,52)" fg:x="118" fg:w="3"/><text x="78.3957%" y="255.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 1.99%)</title><rect x="78.1457%" y="229" width="1.9868%" height="15" fill="rgb(229,209,22)" fg:x="118" fg:w="3"/><text x="78.3957%" y="239.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 1.99%)</title><rect x="78.1457%" y="213" width="1.9868%" height="15" fill="rgb(234,138,34)" fg:x="118" fg:w="3"/><text x="78.3957%" y="223.50">a..</text></g><g><title>alloc::alloc::alloc (3 samples, 1.99%)</title><rect x="78.1457%" y="197" width="1.9868%" height="15" fill="rgb(212,95,11)" fg:x="118" fg:w="3"/><text x="78.3957%" y="207.50">a..</text></g><g><title>__GI___libc_malloc (3 samples, 1.99%)</title><rect x="78.1457%" y="181" width="1.9868%" height="15" fill="rgb(240,179,47)" fg:x="118" fg:w="3"/><text x="78.3957%" y="191.50">_..</text></g><g><title>_int_malloc (1 samples, 0.66%)</title><rect x="79.4702%" y="165" width="0.6623%" height="15" fill="rgb(240,163,11)" fg:x="120" fg:w="1"/><text x="79.7202%" y="175.50"></text></g><g><title>unlink_chunk (1 samples, 0.66%)</title><rect x="79.4702%" y="149" width="0.6623%" height="15" fill="rgb(236,37,12)" fg:x="120" fg:w="1"/><text x="79.7202%" y="159.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (111 samples, 73.51%)</title><rect x="7.2848%" y="677" width="73.5099%" height="15" fill="rgb(232,164,16)" fg:x="11" fg:w="111"/><text x="7.5348%" y="687.50">regex_automata::meta::strategy::Core::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (74 samples, 49.01%)</title><rect x="31.7881%" y="661" width="49.0066%" height="15" fill="rgb(244,205,15)" fg:x="48" fg:w="74"/><text x="32.0381%" y="671.50">regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (74 samples, 49.01%)</title><rect x="31.7881%" y="645" width="49.0066%" height="15" fill="rgb(223,117,47)" fg:x="48" fg:w="74"/><text x="32.0381%" y="655.50">regex_automata::nfa::thompson::compiler::Compiler::compile</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (65 samples, 43.05%)</title><rect x="37.7483%" y="629" width="43.0464%" height="15" fill="rgb(244,107,35)" fg:x="57" fg:w="65"/><text x="37.9983%" y="639.50">regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 43.05%)</title><rect x="37.7483%" y="613" width="43.0464%" height="15" fill="rgb(205,140,8)" fg:x="57" fg:w="65"/><text x="37.9983%" y="623.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::..</text></g><g><title>core::option::Option&lt;T&gt;::map (65 samples, 43.05%)</title><rect x="37.7483%" y="597" width="43.0464%" height="15" fill="rgb(228,84,46)" fg:x="57" fg:w="65"/><text x="37.9983%" y="607.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (65 samples, 43.05%)</title><rect x="37.7483%" y="581" width="43.0464%" height="15" fill="rgb(254,188,9)" fg:x="57" fg:w="65"/><text x="37.9983%" y="591.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (65 samples, 43.05%)</title><rect x="37.7483%" y="565" width="43.0464%" height="15" fill="rgb(206,112,54)" fg:x="57" fg:w="65"/><text x="37.9983%" y="575.50">regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}}</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (65 samples, 43.05%)</title><rect x="37.7483%" y="549" width="43.0464%" height="15" fill="rgb(216,84,49)" fg:x="57" fg:w="65"/><text x="37.9983%" y="559.50">regex_automata::nfa::thompson::compiler::Compiler::c_cap</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (60 samples, 39.74%)</title><rect x="41.0596%" y="533" width="39.7351%" height="15" fill="rgb(214,194,35)" fg:x="62" fg:w="60"/><text x="41.3096%" y="543.50">regex_automata::nfa::thompson::compiler::Compiler::c_cap</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (59 samples, 39.07%)</title><rect x="41.7219%" y="517" width="39.0728%" height="15" fill="rgb(249,28,3)" fg:x="63" fg:w="59"/><text x="41.9719%" y="527.50">regex_automata::nfa::thompson::compiler::Compiler::c</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (59 samples, 39.07%)</title><rect x="41.7219%" y="501" width="39.0728%" height="15" fill="rgb(222,56,52)" fg:x="63" fg:w="59"/><text x="41.9719%" y="511.50">regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (59 samples, 39.07%)</title><rect x="41.7219%" y="485" width="39.0728%" height="15" fill="rgb(245,217,50)" fg:x="63" fg:w="59"/><text x="41.9719%" y="495.50">regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 39.07%)</title><rect x="41.7219%" y="469" width="39.0728%" height="15" fill="rgb(213,201,24)" fg:x="63" fg:w="59"/><text x="41.9719%" y="479.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iter..</text></g><g><title>core::option::Option&lt;T&gt;::map (59 samples, 39.07%)</title><rect x="41.7219%" y="453" width="39.0728%" height="15" fill="rgb(248,116,28)" fg:x="63" fg:w="59"/><text x="41.9719%" y="463.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (59 samples, 39.07%)</title><rect x="41.7219%" y="437" width="39.0728%" height="15" fill="rgb(219,72,43)" fg:x="63" fg:w="59"/><text x="41.9719%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice::{{closure}} (59 samples, 39.07%)</title><rect x="41.7219%" y="421" width="39.0728%" height="15" fill="rgb(209,138,14)" fg:x="63" fg:w="59"/><text x="41.9719%" y="431.50">regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (59 samples, 39.07%)</title><rect x="41.7219%" y="405" width="39.0728%" height="15" fill="rgb(222,18,33)" fg:x="63" fg:w="59"/><text x="41.9719%" y="415.50">regex_automata::nfa::thompson::compiler::Compiler::c</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (59 samples, 39.07%)</title><rect x="41.7219%" y="389" width="39.0728%" height="15" fill="rgb(213,199,7)" fg:x="63" fg:w="59"/><text x="41.9719%" y="399.50">regex_automata::nfa::thompson::compiler::Compiler::c_concat</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 30.46%)</title><rect x="50.3311%" y="373" width="30.4636%" height="15" fill="rgb(250,110,10)" fg:x="76" fg:w="46"/><text x="50.5811%" y="383.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::ite..</text></g><g><title>core::option::Option&lt;T&gt;::map (46 samples, 30.46%)</title><rect x="50.3311%" y="357" width="30.4636%" height="15" fill="rgb(248,123,6)" fg:x="76" fg:w="46"/><text x="50.5811%" y="367.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (46 samples, 30.46%)</title><rect x="50.3311%" y="341" width="30.4636%" height="15" fill="rgb(206,91,31)" fg:x="76" fg:w="46"/><text x="50.5811%" y="351.50">core::ops::function::impls::&lt;impl core::ops::func..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (46 samples, 30.46%)</title><rect x="50.3311%" y="325" width="30.4636%" height="15" fill="rgb(211,154,13)" fg:x="76" fg:w="46"/><text x="50.5811%" y="335.50">regex_automata::nfa::thompson::compiler::Compiler..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (46 samples, 30.46%)</title><rect x="50.3311%" y="309" width="30.4636%" height="15" fill="rgb(225,148,7)" fg:x="76" fg:w="46"/><text x="50.5811%" y="319.50">regex_automata::nfa::thompson::compiler::Compiler..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::patch (1 samples, 0.66%)</title><rect x="80.1325%" y="293" width="0.6623%" height="15" fill="rgb(220,160,43)" fg:x="121" fg:w="1"/><text x="80.3825%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.66%)</title><rect x="80.1325%" y="277" width="0.6623%" height="15" fill="rgb(213,52,39)" fg:x="121" fg:w="1"/><text x="80.3825%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.66%)</title><rect x="80.1325%" y="261" width="0.6623%" height="15" fill="rgb(243,137,7)" fg:x="121" fg:w="1"/><text x="80.3825%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.66%)</title><rect x="80.1325%" y="245" width="0.6623%" height="15" fill="rgb(230,79,13)" fg:x="121" fg:w="1"/><text x="80.3825%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.66%)</title><rect x="80.1325%" y="229" width="0.6623%" height="15" fill="rgb(247,105,23)" fg:x="121" fg:w="1"/><text x="80.3825%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="80.1325%" y="213" width="0.6623%" height="15" fill="rgb(223,179,41)" fg:x="121" fg:w="1"/><text x="80.3825%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="80.1325%" y="197" width="0.6623%" height="15" fill="rgb(218,9,34)" fg:x="121" fg:w="1"/><text x="80.3825%" y="207.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.66%)</title><rect x="80.1325%" y="181" width="0.6623%" height="15" fill="rgb(222,106,8)" fg:x="121" fg:w="1"/><text x="80.3825%" y="191.50"></text></g><g><title>checked_request2size (1 samples, 0.66%)</title><rect x="80.1325%" y="165" width="0.6623%" height="15" fill="rgb(211,220,0)" fg:x="121" fg:w="1"/><text x="80.3825%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::ReverseSuffix::new (1 samples, 0.66%)</title><rect x="80.7947%" y="677" width="0.6623%" height="15" fill="rgb(229,52,16)" fg:x="122" fg:w="1"/><text x="81.0447%" y="687.50"></text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.66%)</title><rect x="80.7947%" y="661" width="0.6623%" height="15" fill="rgb(212,155,18)" fg:x="122" fg:w="1"/><text x="81.0447%" y="671.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.66%)</title><rect x="80.7947%" y="645" width="0.6623%" height="15" fill="rgb(242,21,14)" fg:x="122" fg:w="1"/><text x="81.0447%" y="655.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract_alternation (1 samples, 0.66%)</title><rect x="80.7947%" y="629" width="0.6623%" height="15" fill="rgb(222,19,48)" fg:x="122" fg:w="1"/><text x="81.0447%" y="639.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.66%)</title><rect x="80.7947%" y="613" width="0.6623%" height="15" fill="rgb(232,45,27)" fg:x="122" fg:w="1"/><text x="81.0447%" y="623.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract_concat (1 samples, 0.66%)</title><rect x="80.7947%" y="597" width="0.6623%" height="15" fill="rgb(249,103,42)" fg:x="122" fg:w="1"/><text x="81.0447%" y="607.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.66%)</title><rect x="80.7947%" y="581" width="0.6623%" height="15" fill="rgb(246,81,33)" fg:x="122" fg:w="1"/><text x="81.0447%" y="591.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract_repetition (1 samples, 0.66%)</title><rect x="80.7947%" y="565" width="0.6623%" height="15" fill="rgb(252,33,42)" fg:x="122" fg:w="1"/><text x="81.0447%" y="575.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::cross (1 samples, 0.66%)</title><rect x="80.7947%" y="549" width="0.6623%" height="15" fill="rgb(209,212,41)" fg:x="122" fg:w="1"/><text x="81.0447%" y="559.50"></text></g><g><title>regex_syntax::hir::literal::Seq::cross_reverse (1 samples, 0.66%)</title><rect x="80.7947%" y="533" width="0.6623%" height="15" fill="rgb(207,154,6)" fg:x="122" fg:w="1"/><text x="81.0447%" y="543.50"></text></g><g><title>regex_syntax::hir::literal::Seq::cross_preamble (1 samples, 0.66%)</title><rect x="80.7947%" y="517" width="0.6623%" height="15" fill="rgb(223,64,47)" fg:x="122" fg:w="1"/><text x="81.0447%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::literal::Seq&gt; (1 samples, 0.66%)</title><rect x="80.7947%" y="501" width="0.6623%" height="15" fill="rgb(211,161,38)" fg:x="122" fg:w="1"/><text x="81.0447%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;regex_syntax::hir::literal::Literal&gt;&gt;&gt; (1 samples, 0.66%)</title><rect x="80.7947%" y="485" width="0.6623%" height="15" fill="rgb(219,138,40)" fg:x="122" fg:w="1"/><text x="81.0447%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::hir::literal::Literal&gt;&gt; (1 samples, 0.66%)</title><rect x="80.7947%" y="469" width="0.6623%" height="15" fill="rgb(241,228,46)" fg:x="122" fg:w="1"/><text x="81.0447%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_syntax::hir::literal::Literal&gt;&gt; (1 samples, 0.66%)</title><rect x="80.7947%" y="453" width="0.6623%" height="15" fill="rgb(223,209,38)" fg:x="122" fg:w="1"/><text x="81.0447%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="80.7947%" y="437" width="0.6623%" height="15" fill="rgb(236,164,45)" fg:x="122" fg:w="1"/><text x="81.0447%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.66%)</title><rect x="80.7947%" y="421" width="0.6623%" height="15" fill="rgb(231,15,5)" fg:x="122" fg:w="1"/><text x="81.0447%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.66%)</title><rect x="80.7947%" y="405" width="0.6623%" height="15" fill="rgb(252,35,15)" fg:x="122" fg:w="1"/><text x="81.0447%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.66%)</title><rect x="80.7947%" y="389" width="0.6623%" height="15" fill="rgb(248,181,18)" fg:x="122" fg:w="1"/><text x="81.0447%" y="399.50"></text></g><g><title>__GI___libc_free (1 samples, 0.66%)</title><rect x="80.7947%" y="373" width="0.6623%" height="15" fill="rgb(233,39,42)" fg:x="122" fg:w="1"/><text x="81.0447%" y="383.50"></text></g><g><title>_int_free (1 samples, 0.66%)</title><rect x="80.7947%" y="357" width="0.6623%" height="15" fill="rgb(238,110,33)" fg:x="122" fg:w="1"/><text x="81.0447%" y="367.50"></text></g><g><title>tcache_put (1 samples, 0.66%)</title><rect x="80.7947%" y="341" width="0.6623%" height="15" fill="rgb(233,195,10)" fg:x="122" fg:w="1"/><text x="81.0447%" y="351.50"></text></g><g><title>regex_automata::meta::strategy::new (113 samples, 74.83%)</title><rect x="7.2848%" y="693" width="74.8344%" height="15" fill="rgb(254,105,3)" fg:x="11" fg:w="113"/><text x="7.5348%" y="703.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.66%)</title><rect x="81.4570%" y="677" width="0.6623%" height="15" fill="rgb(221,225,9)" fg:x="123" fg:w="1"/><text x="81.7070%" y="687.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.66%)</title><rect x="81.4570%" y="661" width="0.6623%" height="15" fill="rgb(224,227,45)" fg:x="123" fg:w="1"/><text x="81.7070%" y="671.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract_alternation (1 samples, 0.66%)</title><rect x="81.4570%" y="645" width="0.6623%" height="15" fill="rgb(229,198,43)" fg:x="123" fg:w="1"/><text x="81.7070%" y="655.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.66%)</title><rect x="81.4570%" y="629" width="0.6623%" height="15" fill="rgb(206,209,35)" fg:x="123" fg:w="1"/><text x="81.7070%" y="639.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract_concat (1 samples, 0.66%)</title><rect x="81.4570%" y="613" width="0.6623%" height="15" fill="rgb(245,195,53)" fg:x="123" fg:w="1"/><text x="81.7070%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::literal::Seq&gt; (1 samples, 0.66%)</title><rect x="81.4570%" y="597" width="0.6623%" height="15" fill="rgb(240,92,26)" fg:x="123" fg:w="1"/><text x="81.7070%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;regex_syntax::hir::literal::Literal&gt;&gt;&gt; (1 samples, 0.66%)</title><rect x="81.4570%" y="581" width="0.6623%" height="15" fill="rgb(207,40,23)" fg:x="123" fg:w="1"/><text x="81.7070%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::hir::literal::Literal&gt;&gt; (1 samples, 0.66%)</title><rect x="81.4570%" y="565" width="0.6623%" height="15" fill="rgb(223,111,35)" fg:x="123" fg:w="1"/><text x="81.7070%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.66%)</title><rect x="81.4570%" y="549" width="0.6623%" height="15" fill="rgb(229,147,28)" fg:x="123" fg:w="1"/><text x="81.7070%" y="559.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (114 samples, 75.50%)</title><rect x="7.2848%" y="709" width="75.4967%" height="15" fill="rgb(211,29,28)" fg:x="11" fg:w="114"/><text x="7.5348%" y="719.50">regex_automata::meta::regex::Builder::build_many_from_hir</text></g><g><title>regex_automata::util::pool::Pool&lt;T,F&gt;::new (1 samples, 0.66%)</title><rect x="82.1192%" y="693" width="0.6623%" height="15" fill="rgb(228,72,33)" fg:x="124" fg:w="1"/><text x="82.3692%" y="703.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::new (1 samples, 0.66%)</title><rect x="82.1192%" y="677" width="0.6623%" height="15" fill="rgb(205,214,31)" fg:x="124" fg:w="1"/><text x="82.3692%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.66%)</title><rect x="82.1192%" y="661" width="0.6623%" height="15" fill="rgb(224,111,15)" fg:x="124" fg:w="1"/><text x="82.3692%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.66%)</title><rect x="82.1192%" y="645" width="0.6623%" height="15" fill="rgb(253,21,26)" fg:x="124" fg:w="1"/><text x="82.3692%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.66%)</title><rect x="82.1192%" y="629" width="0.6623%" height="15" fill="rgb(245,139,43)" fg:x="124" fg:w="1"/><text x="82.3692%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.66%)</title><rect x="82.1192%" y="613" width="0.6623%" height="15" fill="rgb(252,170,7)" fg:x="124" fg:w="1"/><text x="82.3692%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.66%)</title><rect x="82.1192%" y="597" width="0.6623%" height="15" fill="rgb(231,118,14)" fg:x="124" fg:w="1"/><text x="82.3692%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.66%)</title><rect x="82.1192%" y="581" width="0.6623%" height="15" fill="rgb(238,83,0)" fg:x="124" fg:w="1"/><text x="82.3692%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.66%)</title><rect x="82.1192%" y="565" width="0.6623%" height="15" fill="rgb(221,39,39)" fg:x="124" fg:w="1"/><text x="82.3692%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.66%)</title><rect x="82.1192%" y="549" width="0.6623%" height="15" fill="rgb(222,119,46)" fg:x="124" fg:w="1"/><text x="82.3692%" y="559.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.66%)</title><rect x="82.1192%" y="533" width="0.6623%" height="15" fill="rgb(222,165,49)" fg:x="124" fg:w="1"/><text x="82.3692%" y="543.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.66%)</title><rect x="82.1192%" y="517" width="0.6623%" height="15" fill="rgb(219,113,52)" fg:x="124" fg:w="1"/><text x="82.3692%" y="527.50"></text></g><g><title>std::sys::alloc::unix::aligned_malloc (1 samples, 0.66%)</title><rect x="82.1192%" y="501" width="0.6623%" height="15" fill="rgb(214,7,15)" fg:x="124" fg:w="1"/><text x="82.3692%" y="511.50"></text></g><g><title>__posix_memalign (1 samples, 0.66%)</title><rect x="82.1192%" y="485" width="0.6623%" height="15" fill="rgb(235,32,4)" fg:x="124" fg:w="1"/><text x="82.3692%" y="495.50"></text></g><g><title>__posix_memalign (1 samples, 0.66%)</title><rect x="82.1192%" y="469" width="0.6623%" height="15" fill="rgb(238,90,54)" fg:x="124" fg:w="1"/><text x="82.3692%" y="479.50"></text></g><g><title>_mid_memalign (1 samples, 0.66%)</title><rect x="82.1192%" y="453" width="0.6623%" height="15" fill="rgb(213,208,19)" fg:x="124" fg:w="1"/><text x="82.3692%" y="463.50"></text></g><g><title>tcache_next (1 samples, 0.66%)</title><rect x="82.1192%" y="437" width="0.6623%" height="15" fill="rgb(233,156,4)" fg:x="124" fg:w="1"/><text x="82.3692%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.66%)</title><rect x="82.7815%" y="645" width="0.6623%" height="15" fill="rgb(207,194,5)" fg:x="125" fg:w="1"/><text x="83.0315%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned (1 samples, 0.66%)</title><rect x="82.7815%" y="629" width="0.6623%" height="15" fill="rgb(206,111,30)" fg:x="125" fg:w="1"/><text x="83.0315%" y="639.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.66%)</title><rect x="83.4437%" y="645" width="0.6623%" height="15" fill="rgb(243,70,54)" fg:x="126" fg:w="1"/><text x="83.6937%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.66%)</title><rect x="83.4437%" y="629" width="0.6623%" height="15" fill="rgb(242,28,8)" fg:x="126" fg:w="1"/><text x="83.6937%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.66%)</title><rect x="83.4437%" y="613" width="0.6623%" height="15" fill="rgb(219,106,18)" fg:x="126" fg:w="1"/><text x="83.6937%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.66%)</title><rect x="83.4437%" y="597" width="0.6623%" height="15" fill="rgb(244,222,10)" fg:x="126" fg:w="1"/><text x="83.6937%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="83.4437%" y="581" width="0.6623%" height="15" fill="rgb(236,179,52)" fg:x="126" fg:w="1"/><text x="83.6937%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="83.4437%" y="565" width="0.6623%" height="15" fill="rgb(213,23,39)" fg:x="126" fg:w="1"/><text x="83.6937%" y="575.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.66%)</title><rect x="84.1060%" y="645" width="0.6623%" height="15" fill="rgb(238,48,10)" fg:x="127" fg:w="1"/><text x="84.3560%" y="655.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::ignore_whitespace (1 samples, 0.66%)</title><rect x="84.1060%" y="629" width="0.6623%" height="15" fill="rgb(251,196,23)" fg:x="127" fg:w="1"/><text x="84.3560%" y="639.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parser (1 samples, 0.66%)</title><rect x="84.1060%" y="613" width="0.6623%" height="15" fill="rgb(250,152,24)" fg:x="127" fg:w="1"/><text x="84.3560%" y="623.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.66%)</title><rect x="84.7682%" y="629" width="0.6623%" height="15" fill="rgb(209,150,17)" fg:x="128" fg:w="1"/><text x="85.0182%" y="639.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.66%)</title><rect x="84.7682%" y="613" width="0.6623%" height="15" fill="rgb(234,202,34)" fg:x="128" fg:w="1"/><text x="85.0182%" y="623.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char (1 samples, 0.66%)</title><rect x="84.7682%" y="597" width="0.6623%" height="15" fill="rgb(253,148,53)" fg:x="128" fg:w="1"/><text x="85.0182%" y="607.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::offset (1 samples, 0.66%)</title><rect x="84.7682%" y="581" width="0.6623%" height="15" fill="rgb(218,129,16)" fg:x="128" fg:w="1"/><text x="85.0182%" y="591.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.66%)</title><rect x="84.7682%" y="565" width="0.6623%" height="15" fill="rgb(216,85,19)" fg:x="128" fg:w="1"/><text x="85.0182%" y="575.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 1.32%)</title><rect x="84.7682%" y="645" width="1.3245%" height="15" fill="rgb(235,228,7)" fg:x="128" fg:w="2"/><text x="85.0182%" y="655.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek (1 samples, 0.66%)</title><rect x="85.4305%" y="629" width="0.6623%" height="15" fill="rgb(245,175,0)" fg:x="129" fg:w="1"/><text x="85.6805%" y="639.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char (1 samples, 0.66%)</title><rect x="85.4305%" y="613" width="0.6623%" height="15" fill="rgb(208,168,36)" fg:x="129" fg:w="1"/><text x="85.6805%" y="623.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.66%)</title><rect x="85.4305%" y="597" width="0.6623%" height="15" fill="rgb(246,171,24)" fg:x="129" fg:w="1"/><text x="85.6805%" y="607.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.66%)</title><rect x="85.4305%" y="581" width="0.6623%" height="15" fill="rgb(215,142,24)" fg:x="129" fg:w="1"/><text x="85.6805%" y="591.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.66%)</title><rect x="85.4305%" y="565" width="0.6623%" height="15" fill="rgb(250,187,7)" fg:x="129" fg:w="1"/><text x="85.6805%" y="575.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.66%)</title><rect x="86.0927%" y="645" width="0.6623%" height="15" fill="rgb(228,66,33)" fg:x="130" fg:w="1"/><text x="86.3427%" y="655.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::into_item (1 samples, 0.66%)</title><rect x="86.0927%" y="629" width="0.6623%" height="15" fill="rgb(234,215,21)" fg:x="130" fg:w="1"/><text x="86.3427%" y="639.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 4.64%)</title><rect x="82.7815%" y="661" width="4.6358%" height="15" fill="rgb(222,191,20)" fg:x="125" fg:w="7"/><text x="83.0315%" y="671.50">regex..</text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.66%)</title><rect x="86.7550%" y="645" width="0.6623%" height="15" fill="rgb(245,79,54)" fg:x="131" fg:w="1"/><text x="87.0050%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.66%)</title><rect x="86.7550%" y="629" width="0.6623%" height="15" fill="rgb(240,10,37)" fg:x="131" fg:w="1"/><text x="87.0050%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.66%)</title><rect x="86.7550%" y="613" width="0.6623%" height="15" fill="rgb(214,192,32)" fg:x="131" fg:w="1"/><text x="87.0050%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.66%)</title><rect x="86.7550%" y="597" width="0.6623%" height="15" fill="rgb(209,36,54)" fg:x="131" fg:w="1"/><text x="87.0050%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="86.7550%" y="581" width="0.6623%" height="15" fill="rgb(220,10,11)" fg:x="131" fg:w="1"/><text x="87.0050%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="86.7550%" y="565" width="0.6623%" height="15" fill="rgb(221,106,17)" fg:x="131" fg:w="1"/><text x="87.0050%" y="575.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.66%)</title><rect x="86.7550%" y="549" width="0.6623%" height="15" fill="rgb(251,142,44)" fg:x="131" fg:w="1"/><text x="87.0050%" y="559.50"></text></g><g><title>_int_malloc (1 samples, 0.66%)</title><rect x="86.7550%" y="533" width="0.6623%" height="15" fill="rgb(238,13,15)" fg:x="131" fg:w="1"/><text x="87.0050%" y="543.50"></text></g><g><title>malloc_consolidate (1 samples, 0.66%)</title><rect x="86.7550%" y="517" width="0.6623%" height="15" fill="rgb(208,107,27)" fg:x="131" fg:w="1"/><text x="87.0050%" y="527.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_alternate (1 samples, 0.66%)</title><rect x="87.4172%" y="661" width="0.6623%" height="15" fill="rgb(205,136,37)" fg:x="132" fg:w="1"/><text x="87.6672%" y="671.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_or_add_alternation (1 samples, 0.66%)</title><rect x="87.4172%" y="645" width="0.6623%" height="15" fill="rgb(250,205,27)" fg:x="132" fg:w="1"/><text x="87.6672%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.66%)</title><rect x="87.4172%" y="629" width="0.6623%" height="15" fill="rgb(210,80,43)" fg:x="132" fg:w="1"/><text x="87.6672%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.66%)</title><rect x="87.4172%" y="613" width="0.6623%" height="15" fill="rgb(247,160,36)" fg:x="132" fg:w="1"/><text x="87.6672%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.66%)</title><rect x="87.4172%" y="597" width="0.6623%" height="15" fill="rgb(234,13,49)" fg:x="132" fg:w="1"/><text x="87.6672%" y="607.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.66%)</title><rect x="87.4172%" y="581" width="0.6623%" height="15" fill="rgb(234,122,0)" fg:x="132" fg:w="1"/><text x="87.6672%" y="591.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 5.96%)</title><rect x="82.7815%" y="709" width="5.9603%" height="15" fill="rgb(207,146,38)" fg:x="125" fg:w="9"/><text x="83.0315%" y="719.50">regex_sy..</text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse (9 samples, 5.96%)</title><rect x="82.7815%" y="693" width="5.9603%" height="15" fill="rgb(207,177,25)" fg:x="125" fg:w="9"/><text x="83.0315%" y="703.50">regex_sy..</text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 5.96%)</title><rect x="82.7815%" y="677" width="5.9603%" height="15" fill="rgb(211,178,42)" fg:x="125" fg:w="9"/><text x="83.0315%" y="687.50">regex_sy..</text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.66%)</title><rect x="88.0795%" y="661" width="0.6623%" height="15" fill="rgb(230,69,54)" fg:x="133" fg:w="1"/><text x="88.3295%" y="671.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit (1 samples, 0.66%)</title><rect x="88.0795%" y="645" width="0.6623%" height="15" fill="rgb(214,135,41)" fg:x="133" fg:w="1"/><text x="88.3295%" y="655.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.66%)</title><rect x="88.0795%" y="629" width="0.6623%" height="15" fill="rgb(237,67,25)" fg:x="133" fg:w="1"/><text x="88.3295%" y="639.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 1.32%)</title><rect x="88.7417%" y="661" width="1.3245%" height="15" fill="rgb(222,189,50)" fg:x="134" fg:w="2"/><text x="88.9917%" y="671.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::unicode_fold_and_negate (1 samples, 0.66%)</title><rect x="89.4040%" y="645" width="0.6623%" height="15" fill="rgb(245,148,34)" fg:x="135" fg:w="1"/><text x="89.6540%" y="655.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::negate (1 samples, 0.66%)</title><rect x="89.4040%" y="629" width="0.6623%" height="15" fill="rgb(222,29,6)" fg:x="135" fg:w="1"/><text x="89.6540%" y="639.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::negate (1 samples, 0.66%)</title><rect x="89.4040%" y="613" width="0.6623%" height="15" fill="rgb(221,189,43)" fg:x="135" fg:w="1"/><text x="89.6540%" y="623.50"></text></g><g><title>regex_syntax::hir::interval::Interval::create (1 samples, 0.66%)</title><rect x="89.4040%" y="597" width="0.6623%" height="15" fill="rgb(207,36,27)" fg:x="135" fg:w="1"/><text x="89.6540%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (2 samples, 1.32%)</title><rect x="90.0662%" y="597" width="1.3245%" height="15" fill="rgb(217,90,24)" fg:x="136" fg:w="2"/><text x="90.3162%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.66%)</title><rect x="91.3907%" y="565" width="0.6623%" height="15" fill="rgb(224,66,35)" fg:x="138" fg:w="1"/><text x="91.6407%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.66%)</title><rect x="91.3907%" y="549" width="0.6623%" height="15" fill="rgb(221,13,50)" fg:x="138" fg:w="1"/><text x="91.6407%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.66%)</title><rect x="91.3907%" y="533" width="0.6623%" height="15" fill="rgb(236,68,49)" fg:x="138" fg:w="1"/><text x="91.6407%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="91.3907%" y="517" width="0.6623%" height="15" fill="rgb(229,146,28)" fg:x="138" fg:w="1"/><text x="91.6407%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="91.3907%" y="501" width="0.6623%" height="15" fill="rgb(225,31,38)" fg:x="138" fg:w="1"/><text x="91.6407%" y="511.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.66%)</title><rect x="91.3907%" y="485" width="0.6623%" height="15" fill="rgb(250,208,3)" fg:x="138" fg:w="1"/><text x="91.6407%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.66%)</title><rect x="92.0530%" y="549" width="0.6623%" height="15" fill="rgb(246,54,23)" fg:x="139" fg:w="1"/><text x="92.3030%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.66%)</title><rect x="92.0530%" y="533" width="0.6623%" height="15" fill="rgb(243,76,11)" fg:x="139" fg:w="1"/><text x="92.3030%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.66%)</title><rect x="92.0530%" y="517" width="0.6623%" height="15" fill="rgb(245,21,50)" fg:x="139" fg:w="1"/><text x="92.3030%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="92.0530%" y="501" width="0.6623%" height="15" fill="rgb(228,9,43)" fg:x="139" fg:w="1"/><text x="92.3030%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="92.0530%" y="485" width="0.6623%" height="15" fill="rgb(208,100,47)" fg:x="139" fg:w="1"/><text x="92.3030%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.66%)</title><rect x="92.0530%" y="469" width="0.6623%" height="15" fill="rgb(232,26,8)" fg:x="139" fg:w="1"/><text x="92.3030%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.66%)</title><rect x="92.0530%" y="453" width="0.6623%" height="15" fill="rgb(216,166,38)" fg:x="139" fg:w="1"/><text x="92.3030%" y="463.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.66%)</title><rect x="92.0530%" y="437" width="0.6623%" height="15" fill="rgb(251,202,51)" fg:x="139" fg:w="1"/><text x="92.3030%" y="447.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.66%)</title><rect x="92.0530%" y="421" width="0.6623%" height="15" fill="rgb(254,216,34)" fg:x="139" fg:w="1"/><text x="92.3030%" y="431.50"></text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit_class_post (5 samples, 3.31%)</title><rect x="90.0662%" y="629" width="3.3113%" height="15" fill="rgb(251,32,27)" fg:x="136" fg:w="5"/><text x="90.3162%" y="639.50">reg..</text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (5 samples, 3.31%)</title><rect x="90.0662%" y="613" width="3.3113%" height="15" fill="rgb(208,127,28)" fg:x="136" fg:w="5"/><text x="90.3162%" y="623.50">&lt;re..</text></g><g><title>regex_syntax::hir::ClassUnicode::push (3 samples, 1.99%)</title><rect x="91.3907%" y="597" width="1.9868%" height="15" fill="rgb(224,137,22)" fg:x="138" fg:w="3"/><text x="91.6407%" y="607.50">r..</text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::push (3 samples, 1.99%)</title><rect x="91.3907%" y="581" width="1.9868%" height="15" fill="rgb(254,70,32)" fg:x="138" fg:w="3"/><text x="91.6407%" y="591.50">r..</text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 1.32%)</title><rect x="92.0530%" y="565" width="1.3245%" height="15" fill="rgb(229,75,37)" fg:x="139" fg:w="2"/><text x="92.3030%" y="575.50"></text></g><g><title>regex_syntax::hir::interval::Interval::union (1 samples, 0.66%)</title><rect x="92.7152%" y="549" width="0.6623%" height="15" fill="rgb(252,64,23)" fg:x="140" fg:w="1"/><text x="92.9652%" y="559.50"></text></g><g><title>regex_syntax::hir::interval::Interval::is_contiguous (1 samples, 0.66%)</title><rect x="92.7152%" y="533" width="0.6623%" height="15" fill="rgb(232,162,48)" fg:x="140" fg:w="1"/><text x="92.9652%" y="543.50"></text></g><g><title>regex::regex::string::Regex::new (136 samples, 90.07%)</title><rect x="3.9735%" y="789" width="90.0662%" height="15" fill="rgb(246,160,12)" fg:x="6" fg:w="136"/><text x="4.2235%" y="799.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::string::RegexBuilder::build (136 samples, 90.07%)</title><rect x="3.9735%" y="773" width="90.0662%" height="15" fill="rgb(247,166,0)" fg:x="6" fg:w="136"/><text x="4.2235%" y="783.50">regex::builders::string::RegexBuilder::build</text></g><g><title>regex::builders::Builder::build_one_string (136 samples, 90.07%)</title><rect x="3.9735%" y="757" width="90.0662%" height="15" fill="rgb(249,219,21)" fg:x="6" fg:w="136"/><text x="4.2235%" y="767.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::build (136 samples, 90.07%)</title><rect x="3.9735%" y="741" width="90.0662%" height="15" fill="rgb(205,209,3)" fg:x="6" fg:w="136"/><text x="4.2235%" y="751.50">regex_automata::meta::regex::Builder::build</text></g><g><title>regex_automata::meta::regex::Builder::build_many (136 samples, 90.07%)</title><rect x="3.9735%" y="725" width="90.0662%" height="15" fill="rgb(243,44,1)" fg:x="6" fg:w="136"/><text x="4.2235%" y="735.50">regex_automata::meta::regex::Builder::build_many</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 5.30%)</title><rect x="88.7417%" y="709" width="5.2980%" height="15" fill="rgb(206,159,16)" fg:x="134" fg:w="8"/><text x="88.9917%" y="719.50">regex_..</text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 5.30%)</title><rect x="88.7417%" y="693" width="5.2980%" height="15" fill="rgb(244,77,30)" fg:x="134" fg:w="8"/><text x="88.9917%" y="703.50">regex_..</text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit (8 samples, 5.30%)</title><rect x="88.7417%" y="677" width="5.2980%" height="15" fill="rgb(218,69,12)" fg:x="134" fg:w="8"/><text x="88.9917%" y="687.50">regex_..</text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::induct (6 samples, 3.97%)</title><rect x="90.0662%" y="661" width="3.9735%" height="15" fill="rgb(212,87,7)" fg:x="136" fg:w="6"/><text x="90.3162%" y="671.50">rege..</text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit_class (6 samples, 3.97%)</title><rect x="90.0662%" y="645" width="3.9735%" height="15" fill="rgb(245,114,25)" fg:x="136" fg:w="6"/><text x="90.3162%" y="655.50">rege..</text></g><g><title>regex_syntax::ast::visitor::HeapVisitor::visit_class_pre (1 samples, 0.66%)</title><rect x="93.3775%" y="629" width="0.6623%" height="15" fill="rgb(210,61,42)" fg:x="141" fg:w="1"/><text x="93.6275%" y="639.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.66%)</title><rect x="93.3775%" y="613" width="0.6623%" height="15" fill="rgb(211,52,33)" fg:x="141" fg:w="1"/><text x="93.6275%" y="623.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::next_state (1 samples, 0.66%)</title><rect x="94.0397%" y="501" width="0.6623%" height="15" fill="rgb(234,58,33)" fg:x="142" fg:w="1"/><text x="94.2897%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.66%)</title><rect x="94.0397%" y="485" width="0.6623%" height="15" fill="rgb(220,115,36)" fg:x="142" fg:w="1"/><text x="94.2897%" y="495.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.66%)</title><rect x="94.0397%" y="469" width="0.6623%" height="15" fill="rgb(243,153,54)" fg:x="142" fg:w="1"/><text x="94.2897%" y="479.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.66%)</title><rect x="94.0397%" y="453" width="0.6623%" height="15" fill="rgb(251,47,18)" fg:x="142" fg:w="1"/><text x="94.2897%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.66%)</title><rect x="94.0397%" y="437" width="0.6623%" height="15" fill="rgb(242,102,42)" fg:x="142" fg:w="1"/><text x="94.2897%" y="447.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (2 samples, 1.32%)</title><rect x="94.0397%" y="757" width="1.3245%" height="15" fill="rgb(234,31,38)" fg:x="142" fg:w="2"/><text x="94.2897%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (2 samples, 1.32%)</title><rect x="94.0397%" y="741" width="1.3245%" height="15" fill="rgb(221,117,51)" fg:x="142" fg:w="2"/><text x="94.2897%" y="751.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (2 samples, 1.32%)</title><rect x="94.0397%" y="725" width="1.3245%" height="15" fill="rgb(212,20,18)" fg:x="142" fg:w="2"/><text x="94.2897%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.32%)</title><rect x="94.0397%" y="709" width="1.3245%" height="15" fill="rgb(245,133,36)" fg:x="142" fg:w="2"/><text x="94.2897%" y="719.50"></text></g><g><title>&lt;regex::regex::string::Matches as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.32%)</title><rect x="94.0397%" y="693" width="1.3245%" height="15" fill="rgb(212,6,19)" fg:x="142" fg:w="2"/><text x="94.2897%" y="703.50"></text></g><g><title>&lt;regex_automata::meta::regex::FindMatches as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.32%)</title><rect x="94.0397%" y="677" width="1.3245%" height="15" fill="rgb(218,1,36)" fg:x="142" fg:w="2"/><text x="94.2897%" y="687.50"></text></g><g><title>regex_automata::util::iter::Searcher::advance (2 samples, 1.32%)</title><rect x="94.0397%" y="661" width="1.3245%" height="15" fill="rgb(246,84,54)" fg:x="142" fg:w="2"/><text x="94.2897%" y="671.50"></text></g><g><title>regex_automata::util::iter::Searcher::try_advance (2 samples, 1.32%)</title><rect x="94.0397%" y="645" width="1.3245%" height="15" fill="rgb(242,110,6)" fg:x="142" fg:w="2"/><text x="94.2897%" y="655.50"></text></g><g><title>&lt;regex_automata::meta::regex::FindMatches as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (2 samples, 1.32%)</title><rect x="94.0397%" y="629" width="1.3245%" height="15" fill="rgb(214,47,5)" fg:x="142" fg:w="2"/><text x="94.2897%" y="639.50"></text></g><g><title>regex_automata::meta::regex::Regex::search_with (2 samples, 1.32%)</title><rect x="94.0397%" y="613" width="1.3245%" height="15" fill="rgb(218,159,25)" fg:x="142" fg:w="2"/><text x="94.2897%" y="623.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 1.32%)</title><rect x="94.0397%" y="597" width="1.3245%" height="15" fill="rgb(215,211,28)" fg:x="142" fg:w="2"/><text x="94.2897%" y="607.50"></text></g><g><title>regex_automata::meta::wrappers::HybridEngine::try_search (2 samples, 1.32%)</title><rect x="94.0397%" y="581" width="1.3245%" height="15" fill="rgb(238,59,32)" fg:x="142" fg:w="2"/><text x="94.2897%" y="591.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 1.32%)</title><rect x="94.0397%" y="565" width="1.3245%" height="15" fill="rgb(226,82,3)" fg:x="142" fg:w="2"/><text x="94.2897%" y="575.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::try_search_fwd (2 samples, 1.32%)</title><rect x="94.0397%" y="549" width="1.3245%" height="15" fill="rgb(240,164,32)" fg:x="142" fg:w="2"/><text x="94.2897%" y="559.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 1.32%)</title><rect x="94.0397%" y="533" width="1.3245%" height="15" fill="rgb(232,46,7)" fg:x="142" fg:w="2"/><text x="94.2897%" y="543.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd_imp (2 samples, 1.32%)</title><rect x="94.0397%" y="517" width="1.3245%" height="15" fill="rgb(229,129,53)" fg:x="142" fg:w="2"/><text x="94.2897%" y="527.50"></text></g><g><title>regex_automata::hybrid::search::init_fwd (1 samples, 0.66%)</title><rect x="94.7020%" y="501" width="0.6623%" height="15" fill="rgb(234,188,29)" fg:x="143" fg:w="1"/><text x="94.9520%" y="511.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::start_state_forward (1 samples, 0.66%)</title><rect x="94.7020%" y="485" width="0.6623%" height="15" fill="rgb(246,141,4)" fg:x="143" fg:w="1"/><text x="94.9520%" y="495.50"></text></g><g><title>regex_automata::hybrid::dfa::DFA::start_state (1 samples, 0.66%)</title><rect x="94.7020%" y="469" width="0.6623%" height="15" fill="rgb(229,23,39)" fg:x="143" fg:w="1"/><text x="94.9520%" y="479.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.66%)</title><rect x="94.7020%" y="453" width="0.6623%" height="15" fill="rgb(206,12,3)" fg:x="143" fg:w="1"/><text x="94.9520%" y="463.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_one (1 samples, 0.66%)</title><rect x="94.7020%" y="437" width="0.6623%" height="15" fill="rgb(252,226,20)" fg:x="143" fg:w="1"/><text x="94.9520%" y="447.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderEmpty::into_matches (1 samples, 0.66%)</title><rect x="94.7020%" y="421" width="0.6623%" height="15" fill="rgb(216,123,35)" fg:x="143" fg:w="1"/><text x="94.9520%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.66%)</title><rect x="94.7020%" y="405" width="0.6623%" height="15" fill="rgb(212,68,40)" fg:x="143" fg:w="1"/><text x="94.9520%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.66%)</title><rect x="94.7020%" y="389" width="0.6623%" height="15" fill="rgb(254,125,32)" fg:x="143" fg:w="1"/><text x="94.9520%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.66%)</title><rect x="94.7020%" y="373" width="0.6623%" height="15" fill="rgb(253,97,22)" fg:x="143" fg:w="1"/><text x="94.9520%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.66%)</title><rect x="94.7020%" y="357" width="0.6623%" height="15" fill="rgb(241,101,14)" fg:x="143" fg:w="1"/><text x="94.9520%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.66%)</title><rect x="94.7020%" y="341" width="0.6623%" height="15" fill="rgb(238,103,29)" fg:x="143" fg:w="1"/><text x="94.9520%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.66%)</title><rect x="94.7020%" y="325" width="0.6623%" height="15" fill="rgb(233,195,47)" fg:x="143" fg:w="1"/><text x="94.9520%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.66%)</title><rect x="94.7020%" y="309" width="0.6623%" height="15" fill="rgb(246,218,30)" fg:x="143" fg:w="1"/><text x="94.9520%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="94.7020%" y="293" width="0.6623%" height="15" fill="rgb(219,145,47)" fg:x="143" fg:w="1"/><text x="94.9520%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="94.7020%" y="277" width="0.6623%" height="15" fill="rgb(243,12,26)" fg:x="143" fg:w="1"/><text x="94.9520%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.66%)</title><rect x="95.3642%" y="485" width="0.6623%" height="15" fill="rgb(214,87,16)" fg:x="144" fg:w="1"/><text x="95.6142%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.66%)</title><rect x="95.3642%" y="469" width="0.6623%" height="15" fill="rgb(208,99,42)" fg:x="144" fg:w="1"/><text x="95.6142%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.66%)</title><rect x="95.3642%" y="453" width="0.6623%" height="15" fill="rgb(253,99,2)" fg:x="144" fg:w="1"/><text x="95.6142%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.66%)</title><rect x="95.3642%" y="437" width="0.6623%" height="15" fill="rgb(220,168,23)" fg:x="144" fg:w="1"/><text x="95.6142%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.66%)</title><rect x="95.3642%" y="421" width="0.6623%" height="15" fill="rgb(242,38,24)" fg:x="144" fg:w="1"/><text x="95.6142%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.66%)</title><rect x="95.3642%" y="405" width="0.6623%" height="15" fill="rgb(225,182,9)" fg:x="144" fg:w="1"/><text x="95.6142%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.66%)</title><rect x="95.3642%" y="389" width="0.6623%" height="15" fill="rgb(243,178,37)" fg:x="144" fg:w="1"/><text x="95.6142%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="95.3642%" y="373" width="0.6623%" height="15" fill="rgb(232,139,19)" fg:x="144" fg:w="1"/><text x="95.6142%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="95.3642%" y="357" width="0.6623%" height="15" fill="rgb(225,201,24)" fg:x="144" fg:w="1"/><text x="95.6142%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.66%)</title><rect x="95.3642%" y="341" width="0.6623%" height="15" fill="rgb(221,47,46)" fg:x="144" fg:w="1"/><text x="95.6142%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.66%)</title><rect x="95.3642%" y="325" width="0.6623%" height="15" fill="rgb(249,23,13)" fg:x="144" fg:w="1"/><text x="95.6142%" y="335.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.66%)</title><rect x="95.3642%" y="309" width="0.6623%" height="15" fill="rgb(219,9,5)" fg:x="144" fg:w="1"/><text x="95.6142%" y="319.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.66%)</title><rect x="95.3642%" y="293" width="0.6623%" height="15" fill="rgb(254,171,16)" fg:x="144" fg:w="1"/><text x="95.6142%" y="303.50"></text></g><g><title>_int_realloc (1 samples, 0.66%)</title><rect x="95.3642%" y="277" width="0.6623%" height="15" fill="rgb(230,171,20)" fg:x="144" fg:w="1"/><text x="95.6142%" y="287.50"></text></g><g><title>_int_free_maybe_consolidate (1 samples, 0.66%)</title><rect x="95.3642%" y="261" width="0.6623%" height="15" fill="rgb(210,71,41)" fg:x="144" fg:w="1"/><text x="95.6142%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::add_state (2 samples, 1.32%)</title><rect x="95.3642%" y="501" width="1.3245%" height="15" fill="rgb(206,173,20)" fg:x="144" fg:w="2"/><text x="95.6142%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.66%)</title><rect x="96.0265%" y="485" width="0.6623%" height="15" fill="rgb(233,88,34)" fg:x="145" fg:w="1"/><text x="96.2765%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.66%)</title><rect x="96.0265%" y="469" width="0.6623%" height="15" fill="rgb(223,209,46)" fg:x="145" fg:w="1"/><text x="96.2765%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.66%)</title><rect x="96.0265%" y="453" width="0.6623%" height="15" fill="rgb(250,43,18)" fg:x="145" fg:w="1"/><text x="96.2765%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.66%)</title><rect x="96.0265%" y="437" width="0.6623%" height="15" fill="rgb(208,13,10)" fg:x="145" fg:w="1"/><text x="96.2765%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.66%)</title><rect x="96.0265%" y="421" width="0.6623%" height="15" fill="rgb(212,200,36)" fg:x="145" fg:w="1"/><text x="96.2765%" y="431.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 3.97%)</title><rect x="95.3642%" y="517" width="3.9735%" height="15" fill="rgb(225,90,30)" fg:x="144" fg:w="6"/><text x="95.6142%" y="527.50">rege..</text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_all_transitions (4 samples, 2.65%)</title><rect x="96.6887%" y="501" width="2.6490%" height="15" fill="rgb(236,182,39)" fg:x="146" fg:w="4"/><text x="96.9387%" y="511.50">re..</text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 1.99%)</title><rect x="97.3510%" y="485" width="1.9868%" height="15" fill="rgb(212,144,35)" fg:x="147" fg:w="3"/><text x="97.6010%" y="495.50">r..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 1.99%)</title><rect x="97.3510%" y="469" width="1.9868%" height="15" fill="rgb(228,63,44)" fg:x="147" fg:w="3"/><text x="97.6010%" y="479.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 1.99%)</title><rect x="97.3510%" y="453" width="1.9868%" height="15" fill="rgb(228,109,6)" fg:x="147" fg:w="3"/><text x="97.6010%" y="463.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 1.99%)</title><rect x="97.3510%" y="437" width="1.9868%" height="15" fill="rgb(238,117,24)" fg:x="147" fg:w="3"/><text x="97.6010%" y="447.50">&lt;..</text></g><g><title>all (151 samples, 100%)</title><rect x="0.0000%" y="1141" width="100.0000%" height="15" fill="rgb(242,26,26)" fg:x="0" fg:w="151"/><text x="0.2500%" y="1151.50"></text></g><g><title>bench-f505f821e (151 samples, 100.00%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(221,92,48)" fg:x="0" fg:w="151"/><text x="0.2500%" y="1135.50">bench-f505f821e</text></g><g><title>_start (151 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(209,209,32)" fg:x="0" fg:w="151"/><text x="0.2500%" y="1119.50">_start</text></g><g><title>__libc_start_main_impl (151 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(221,70,22)" fg:x="0" fg:w="151"/><text x="0.2500%" y="1103.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (151 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(248,145,5)" fg:x="0" fg:w="151"/><text x="0.2500%" y="1087.50">__libc_start_call_main</text></g><g><title>main (151 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(226,116,26)" fg:x="0" fg:w="151"/><text x="0.2500%" y="1071.50">main</text></g><g><title>std::rt::lang_start_internal (151 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(244,5,17)" fg:x="0" fg:w="151"/><text x="0.2500%" y="1055.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (151 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(252,159,33)" fg:x="0" fg:w="151"/><text x="0.2500%" y="1039.50">std::panic::catch_unwind</text></g><g><title>std::panicking::catch_unwind (151 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(206,71,0)" fg:x="0" fg:w="151"/><text x="0.2500%" y="1023.50">std::panicking::catch_unwind</text></g><g><title>std::panicking::catch_unwind::do_call (151 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(233,118,54)" fg:x="0" fg:w="151"/><text x="0.2500%" y="1007.50">std::panicking::catch_unwind::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (151 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(234,83,48)" fg:x="0" fg:w="151"/><text x="0.2500%" y="991.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (151 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(228,3,54)" fg:x="0" fg:w="151"/><text x="0.2500%" y="975.50">std::panic::catch_unwind</text></g><g><title>std::panicking::catch_unwind (151 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(226,155,13)" fg:x="0" fg:w="151"/><text x="0.2500%" y="959.50">std::panicking::catch_unwind</text></g><g><title>std::panicking::catch_unwind::do_call (151 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(241,28,37)" fg:x="0" fg:w="151"/><text x="0.2500%" y="943.50">std::panicking::catch_unwind::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (151 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(233,93,10)" fg:x="0" fg:w="151"/><text x="0.2500%" y="927.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (151 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(225,113,19)" fg:x="0" fg:w="151"/><text x="0.2500%" y="911.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (151 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(241,2,18)" fg:x="0" fg:w="151"/><text x="0.2500%" y="895.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (151 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(228,207,21)" fg:x="0" fg:w="151"/><text x="0.2500%" y="879.50">core::ops::function::FnOnce::call_once</text></g><g><title>bench::main (151 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(213,211,35)" fg:x="0" fg:w="151"/><text x="0.2500%" y="863.50">bench::main</text></g><g><title>bench::benches (151 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(209,83,10)" fg:x="0" fg:w="151"/><text x="0.2500%" y="847.50">bench::benches</text></g><g><title>bench::bench_contagem (151 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(209,164,1)" fg:x="0" fg:w="151"/><text x="0.2500%" y="831.50">bench::bench_contagem</text></g><g><title>slowwords::contar_palavras_lento (151 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(213,184,43)" fg:x="0" fg:w="151"/><text x="0.2500%" y="815.50">slowwords::contar_palavras_lento</text></g><g><title>regex::regex::string::Regex::replace_all (9 samples, 5.96%)</title><rect x="94.0397%" y="789" width="5.9603%" height="15" fill="rgb(231,61,34)" fg:x="142" fg:w="9"/><text x="94.2897%" y="799.50">regex::r..</text></g><g><title>regex::regex::string::Regex::replacen (9 samples, 5.96%)</title><rect x="94.0397%" y="773" width="5.9603%" height="15" fill="rgb(235,75,3)" fg:x="142" fg:w="9"/><text x="94.2897%" y="783.50">regex::r..</text></g><g><title>regex::regex::string::Regex::find_iter (7 samples, 4.64%)</title><rect x="95.3642%" y="757" width="4.6358%" height="15" fill="rgb(220,106,47)" fg:x="144" fg:w="7"/><text x="95.6142%" y="767.50">regex..</text></g><g><title>regex_automata::meta::regex::Regex::find_iter (7 samples, 4.64%)</title><rect x="95.3642%" y="741" width="4.6358%" height="15" fill="rgb(210,196,33)" fg:x="144" fg:w="7"/><text x="95.6142%" y="751.50">regex..</text></g><g><title>regex_automata::util::pool::Pool&lt;T,F&gt;::get (7 samples, 4.64%)</title><rect x="95.3642%" y="725" width="4.6358%" height="15" fill="rgb(229,154,42)" fg:x="144" fg:w="7"/><text x="95.6142%" y="735.50">regex..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get (7 samples, 4.64%)</title><rect x="95.3642%" y="709" width="4.6358%" height="15" fill="rgb(228,114,26)" fg:x="144" fg:w="7"/><text x="95.6142%" y="719.50">regex..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 4.64%)</title><rect x="95.3642%" y="693" width="4.6358%" height="15" fill="rgb(208,144,1)" fg:x="144" fg:w="7"/><text x="95.6142%" y="703.50">regex..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (7 samples, 4.64%)</title><rect x="95.3642%" y="677" width="4.6358%" height="15" fill="rgb(239,112,37)" fg:x="144" fg:w="7"/><text x="95.6142%" y="687.50">&lt;allo..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 4.64%)</title><rect x="95.3642%" y="661" width="4.6358%" height="15" fill="rgb(210,96,50)" fg:x="144" fg:w="7"/><text x="95.6142%" y="671.50">regex..</text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 4.64%)</title><rect x="95.3642%" y="645" width="4.6358%" height="15" fill="rgb(222,178,2)" fg:x="144" fg:w="7"/><text x="95.6142%" y="655.50">&lt;rege..</text></g><g><title>regex_automata::meta::wrappers::Hybrid::create_cache (7 samples, 4.64%)</title><rect x="95.3642%" y="629" width="4.6358%" height="15" fill="rgb(226,74,18)" fg:x="144" fg:w="7"/><text x="95.6142%" y="639.50">regex..</text></g><g><title>regex_automata::meta::wrappers::HybridCache::new (7 samples, 4.64%)</title><rect x="95.3642%" y="613" width="4.6358%" height="15" fill="rgb(225,67,54)" fg:x="144" fg:w="7"/><text x="95.6142%" y="623.50">regex..</text></g><g><title>core::option::Option&lt;T&gt;::map (7 samples, 4.64%)</title><rect x="95.3642%" y="597" width="4.6358%" height="15" fill="rgb(251,92,32)" fg:x="144" fg:w="7"/><text x="95.6142%" y="607.50">core:..</text></g><g><title>regex_automata::meta::wrappers::HybridCache::new::{{closure}} (7 samples, 4.64%)</title><rect x="95.3642%" y="581" width="4.6358%" height="15" fill="rgb(228,149,22)" fg:x="144" fg:w="7"/><text x="95.6142%" y="591.50">regex..</text></g><g><title>regex_automata::hybrid::regex::Regex::create_cache (7 samples, 4.64%)</title><rect x="95.3642%" y="565" width="4.6358%" height="15" fill="rgb(243,54,13)" fg:x="144" fg:w="7"/><text x="95.6142%" y="575.50">regex..</text></g><g><title>regex_automata::hybrid::regex::Cache::new (7 samples, 4.64%)</title><rect x="95.3642%" y="549" width="4.6358%" height="15" fill="rgb(243,180,28)" fg:x="144" fg:w="7"/><text x="95.6142%" y="559.50">regex..</text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 4.64%)</title><rect x="95.3642%" y="533" width="4.6358%" height="15" fill="rgb(208,167,24)" fg:x="144" fg:w="7"/><text x="95.6142%" y="543.50">regex..</text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.66%)</title><rect x="99.3377%" y="517" width="0.6623%" height="15" fill="rgb(245,73,45)" fg:x="150" fg:w="1"/><text x="99.5877%" y="527.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSet::new (1 samples, 0.66%)</title><rect x="99.3377%" y="501" width="0.6623%" height="15" fill="rgb(237,203,48)" fg:x="150" fg:w="1"/><text x="99.5877%" y="511.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSet::resize (1 samples, 0.66%)</title><rect x="99.3377%" y="485" width="0.6623%" height="15" fill="rgb(211,197,16)" fg:x="150" fg:w="1"/><text x="99.5877%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (1 samples, 0.66%)</title><rect x="99.3377%" y="469" width="0.6623%" height="15" fill="rgb(243,99,51)" fg:x="150" fg:w="1"/><text x="99.5877%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.66%)</title><rect x="99.3377%" y="453" width="0.6623%" height="15" fill="rgb(215,123,29)" fg:x="150" fg:w="1"/><text x="99.5877%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.66%)</title><rect x="99.3377%" y="437" width="0.6623%" height="15" fill="rgb(239,186,37)" fg:x="150" fg:w="1"/><text x="99.5877%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.66%)</title><rect x="99.3377%" y="421" width="0.6623%" height="15" fill="rgb(252,136,39)" fg:x="150" fg:w="1"/><text x="99.5877%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (1 samples, 0.66%)</title><rect x="99.3377%" y="405" width="0.6623%" height="15" fill="rgb(223,213,32)" fg:x="150" fg:w="1"/><text x="99.5877%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.66%)</title><rect x="99.3377%" y="389" width="0.6623%" height="15" fill="rgb(233,115,5)" fg:x="150" fg:w="1"/><text x="99.5877%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.66%)</title><rect x="99.3377%" y="373" width="0.6623%" height="15" fill="rgb(207,226,44)" fg:x="150" fg:w="1"/><text x="99.5877%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.66%)</title><rect x="99.3377%" y="357" width="0.6623%" height="15" fill="rgb(208,126,0)" fg:x="150" fg:w="1"/><text x="99.5877%" y="367.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.66%)</title><rect x="99.3377%" y="341" width="0.6623%" height="15" fill="rgb(244,66,21)" fg:x="150" fg:w="1"/><text x="99.5877%" y="351.50"></text></g><g><title>_int_malloc (1 samples, 0.66%)</title><rect x="99.3377%" y="325" width="0.6623%" height="15" fill="rgb(222,97,12)" fg:x="150" fg:w="1"/><text x="99.5877%" y="335.50"></text></g></svg></svg>